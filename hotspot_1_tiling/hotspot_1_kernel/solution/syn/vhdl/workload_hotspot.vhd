-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity workload_hotspot is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    result_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    result_ce0 : OUT STD_LOGIC;
    result_we0 : OUT STD_LOGIC;
    result_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    temp_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    temp_ce0 : OUT STD_LOGIC;
    temp_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    temp_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    temp_ce1 : OUT STD_LOGIC;
    temp_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    power_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    power_ce0 : OUT STD_LOGIC;
    power_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    which_boundary : IN STD_LOGIC_VECTOR (2 downto 0) );
end;


architecture behav of workload_hotspot is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_42A00000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010101000000000000000000000";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_394CCCCD : STD_LOGIC_VECTOR (31 downto 0) := "00111001010011001100110011001101";
    constant ap_const_lv32_3D0BCF64 : STD_LOGIC_VECTOR (31 downto 0) := "00111101000010111100111101100100";
    constant ap_const_lv32_3DCCCCCD : STD_LOGIC_VECTOR (31 downto 0) := "00111101110011001100110011001101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_157 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_reg_168 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_reg_179 : STD_LOGIC_VECTOR (9 downto 0);
    signal cmp3_not_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp3_not_reg_454 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp18_not_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp18_not_reg_459 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_reg_464 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state38_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state41_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state44_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state47_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state50_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state53_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state56_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln9_reg_464_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_reg_464_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_reg_464_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_reg_464_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_reg_464_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_reg_464_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_reg_464_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_reg_464_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_reg_464_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_reg_464_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_reg_464_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_reg_464_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_reg_464_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_reg_464_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_reg_464_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_reg_464_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_reg_464_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln9_fu_233_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln9_reg_468 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln10_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_473 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln9_fu_245_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln9_reg_479 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln9_1_fu_253_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln9_1_reg_489 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln9_1_fu_259_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln9_1_reg_495 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln9_fu_267_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln9_reg_500 : STD_LOGIC_VECTOR (5 downto 0);
    signal cmp4_not6_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp4_not6_reg_505 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp19_not5_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp19_not5_reg_510 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln12_fu_338_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln12_reg_515 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state15_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state21_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state24_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state27_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state30_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_state33_pp0_stage1_iter10 : BOOLEAN;
    signal ap_block_state36_pp0_stage1_iter11 : BOOLEAN;
    signal ap_block_state39_pp0_stage1_iter12 : BOOLEAN;
    signal ap_block_state42_pp0_stage1_iter13 : BOOLEAN;
    signal ap_block_state45_pp0_stage1_iter14 : BOOLEAN;
    signal ap_block_state48_pp0_stage1_iter15 : BOOLEAN;
    signal ap_block_state51_pp0_stage1_iter16 : BOOLEAN;
    signal ap_block_state54_pp0_stage1_iter17 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal add_ln13_fu_344_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln13_reg_524 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln13_reg_524_pp0_iter1_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln13_reg_524_pp0_iter2_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln13_reg_524_pp0_iter3_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln13_reg_524_pp0_iter4_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln13_reg_524_pp0_iter5_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state13_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state16_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_state19_pp0_stage2_iter5 : BOOLEAN;
    signal ap_block_state22_pp0_stage2_iter6 : BOOLEAN;
    signal ap_block_state25_pp0_stage2_iter7 : BOOLEAN;
    signal ap_block_state28_pp0_stage2_iter8 : BOOLEAN;
    signal ap_block_state31_pp0_stage2_iter9 : BOOLEAN;
    signal ap_block_state34_pp0_stage2_iter10 : BOOLEAN;
    signal ap_block_state37_pp0_stage2_iter11 : BOOLEAN;
    signal ap_block_state40_pp0_stage2_iter12 : BOOLEAN;
    signal ap_block_state43_pp0_stage2_iter13 : BOOLEAN;
    signal ap_block_state46_pp0_stage2_iter14 : BOOLEAN;
    signal ap_block_state49_pp0_stage2_iter15 : BOOLEAN;
    signal ap_block_state52_pp0_stage2_iter16 : BOOLEAN;
    signal ap_block_state55_pp0_stage2_iter17 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal top_1_reg_544 : STD_LOGIC_VECTOR (31 downto 0);
    signal bottom_1_reg_554 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln10_fu_423_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln10_reg_559 : STD_LOGIC_VECTOR (9 downto 0);
    signal center_reg_564 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal center_reg_564_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal center_reg_564_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal center_reg_564_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal center_reg_564_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal center_reg_564_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal center_reg_564_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal center_reg_564_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal center_reg_564_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal center_reg_564_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal center_reg_564_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal center_reg_564_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal center_reg_564_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal center_reg_564_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal center_reg_564_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal right_reg_571 : STD_LOGIC_VECTOR (31 downto 0);
    signal left_reg_581 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_203_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_586 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal mul_reg_586_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_190_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_reg_591 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal sub2_reg_596 : STD_LOGIC_VECTOR (31 downto 0);
    signal add2_reg_601 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul3_reg_606 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal mul3_reg_606_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul3_reg_606_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul3_reg_606_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul3_reg_606_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul3_reg_606_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul3_reg_606_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_195_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_reg_611 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal sub1_reg_616 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal zext_ln13_fu_450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_reg_621 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_reg_621_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_reg_621_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_reg_621_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_reg_621_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_reg_621_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_reg_621_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_reg_621_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_reg_621_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_reg_621_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_reg_621_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_reg_621_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal power_load_reg_631 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_209_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul1_reg_636 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul2_reg_641 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal mul2_reg_641_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_199_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add1_reg_646 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal add3_reg_651 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal add4_reg_656 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal delta_reg_661 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal add5_reg_666 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten_phi_fu_161_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_r_phi_fu_172_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_c_phi_fu_183_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln13_1_fu_362_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln15_1_fu_392_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_1_fu_397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln12_2_fu_418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_3_fu_445_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_190_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_190_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_195_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_195_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_199_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_199_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_203_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_203_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_209_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_mid2_fu_283_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal cmp4_not_mid1_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln9_2_fu_299_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp19_not_mid1_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln9_3_fu_315_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln12_fu_329_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln12_fu_334_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln9_fu_290_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal c_cast_fu_326_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal or_ln9_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln13_cast_fu_350_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal top_fu_354_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln_fu_367_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln15_fu_374_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln9_1_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln15_fu_378_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal bottom_fu_384_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln14_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln14_fu_406_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln14_fu_411_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln16_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln16_fu_433_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln16_fu_438_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_190_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal grp_fu_195_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component workload_faddfsub_32ns_32ns_32_7_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component workload_fadd_32ns_32ns_32_7_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component workload_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    faddfsub_32ns_32ns_32_7_full_dsp_1_U1 : component workload_faddfsub_32ns_32ns_32_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_190_p0,
        din1 => grp_fu_190_p1,
        opcode => grp_fu_190_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_190_p2);

    faddfsub_32ns_32ns_32_7_full_dsp_1_U2 : component workload_faddfsub_32ns_32ns_32_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_195_p0,
        din1 => grp_fu_195_p1,
        opcode => grp_fu_195_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_195_p2);

    fadd_32ns_32ns_32_7_full_dsp_1_U3 : component workload_fadd_32ns_32ns_32_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_199_p0,
        din1 => grp_fu_199_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_199_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U4 : component workload_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_203_p0,
        din1 => grp_fu_203_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_203_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U5 : component workload_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_209_p0,
        din1 => ap_const_lv32_3DCCCCCD,
        ce => ap_const_logic_1,
        dout => grp_fu_209_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    c_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_reg_464 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                c_reg_179 <= add_ln10_reg_559;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_reg_179 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_reg_464 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_157 <= add_ln9_reg_468;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_157 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    r_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_reg_464 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                r_reg_168 <= select_ln9_1_reg_495;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_reg_168 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_464_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add1_reg_646 <= grp_fu_199_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_464_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add2_reg_601 <= grp_fu_190_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln9_reg_464_pp0_iter11_reg = ap_const_lv1_0))) then
                add3_reg_651 <= grp_fu_199_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln9_reg_464_pp0_iter13_reg = ap_const_lv1_0))) then
                add4_reg_656 <= grp_fu_195_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln9_reg_464_pp0_iter17_reg = ap_const_lv1_0))) then
                add5_reg_666 <= grp_fu_199_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln9_reg_464 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln10_reg_559 <= add_ln10_fu_423_p2;
                bottom_1_reg_554 <= temp_q0;
                top_1_reg_544 <= temp_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln9_reg_464 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln12_reg_515 <= add_ln12_fu_338_p2;
                add_ln13_reg_524 <= add_ln13_fu_344_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln13_reg_524_pp0_iter1_reg <= add_ln13_reg_524;
                add_ln13_reg_524_pp0_iter2_reg <= add_ln13_reg_524_pp0_iter1_reg;
                add_ln13_reg_524_pp0_iter3_reg <= add_ln13_reg_524_pp0_iter2_reg;
                add_ln13_reg_524_pp0_iter4_reg <= add_ln13_reg_524_pp0_iter3_reg;
                add_ln13_reg_524_pp0_iter5_reg <= add_ln13_reg_524_pp0_iter4_reg;
                mul2_reg_641_pp0_iter8_reg <= mul2_reg_641;
                mul_reg_586_pp0_iter3_reg <= mul_reg_586;
                    zext_ln13_reg_621_pp0_iter10_reg(14 downto 0) <= zext_ln13_reg_621_pp0_iter9_reg(14 downto 0);
                    zext_ln13_reg_621_pp0_iter11_reg(14 downto 0) <= zext_ln13_reg_621_pp0_iter10_reg(14 downto 0);
                    zext_ln13_reg_621_pp0_iter12_reg(14 downto 0) <= zext_ln13_reg_621_pp0_iter11_reg(14 downto 0);
                    zext_ln13_reg_621_pp0_iter13_reg(14 downto 0) <= zext_ln13_reg_621_pp0_iter12_reg(14 downto 0);
                    zext_ln13_reg_621_pp0_iter14_reg(14 downto 0) <= zext_ln13_reg_621_pp0_iter13_reg(14 downto 0);
                    zext_ln13_reg_621_pp0_iter15_reg(14 downto 0) <= zext_ln13_reg_621_pp0_iter14_reg(14 downto 0);
                    zext_ln13_reg_621_pp0_iter16_reg(14 downto 0) <= zext_ln13_reg_621_pp0_iter15_reg(14 downto 0);
                    zext_ln13_reg_621_pp0_iter17_reg(14 downto 0) <= zext_ln13_reg_621_pp0_iter16_reg(14 downto 0);
                    zext_ln13_reg_621_pp0_iter7_reg(14 downto 0) <= zext_ln13_reg_621(14 downto 0);
                    zext_ln13_reg_621_pp0_iter8_reg(14 downto 0) <= zext_ln13_reg_621_pp0_iter7_reg(14 downto 0);
                    zext_ln13_reg_621_pp0_iter9_reg(14 downto 0) <= zext_ln13_reg_621_pp0_iter8_reg(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_fu_227_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln9_1_reg_489 <= add_ln9_1_fu_253_p2;
                cmp19_not5_reg_510 <= cmp19_not5_fu_277_p2;
                cmp4_not6_reg_505 <= cmp4_not6_fu_271_p2;
                icmp_ln10_reg_473 <= icmp_ln10_fu_239_p2;
                select_ln9_reg_479 <= select_ln9_fu_245_p3;
                trunc_ln9_reg_500 <= trunc_ln9_fu_267_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln9_reg_468 <= add_ln9_fu_233_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_464_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_reg_591 <= grp_fu_190_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_reg_464 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                center_reg_564 <= temp_q0;
                right_reg_571 <= temp_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                center_reg_564_pp0_iter10_reg <= center_reg_564_pp0_iter9_reg;
                center_reg_564_pp0_iter11_reg <= center_reg_564_pp0_iter10_reg;
                center_reg_564_pp0_iter12_reg <= center_reg_564_pp0_iter11_reg;
                center_reg_564_pp0_iter13_reg <= center_reg_564_pp0_iter12_reg;
                center_reg_564_pp0_iter14_reg <= center_reg_564_pp0_iter13_reg;
                center_reg_564_pp0_iter15_reg <= center_reg_564_pp0_iter14_reg;
                center_reg_564_pp0_iter2_reg <= center_reg_564;
                center_reg_564_pp0_iter3_reg <= center_reg_564_pp0_iter2_reg;
                center_reg_564_pp0_iter4_reg <= center_reg_564_pp0_iter3_reg;
                center_reg_564_pp0_iter5_reg <= center_reg_564_pp0_iter4_reg;
                center_reg_564_pp0_iter6_reg <= center_reg_564_pp0_iter5_reg;
                center_reg_564_pp0_iter7_reg <= center_reg_564_pp0_iter6_reg;
                center_reg_564_pp0_iter8_reg <= center_reg_564_pp0_iter7_reg;
                center_reg_564_pp0_iter9_reg <= center_reg_564_pp0_iter8_reg;
                icmp_ln9_reg_464 <= icmp_ln9_fu_227_p2;
                icmp_ln9_reg_464_pp0_iter10_reg <= icmp_ln9_reg_464_pp0_iter9_reg;
                icmp_ln9_reg_464_pp0_iter11_reg <= icmp_ln9_reg_464_pp0_iter10_reg;
                icmp_ln9_reg_464_pp0_iter12_reg <= icmp_ln9_reg_464_pp0_iter11_reg;
                icmp_ln9_reg_464_pp0_iter13_reg <= icmp_ln9_reg_464_pp0_iter12_reg;
                icmp_ln9_reg_464_pp0_iter14_reg <= icmp_ln9_reg_464_pp0_iter13_reg;
                icmp_ln9_reg_464_pp0_iter15_reg <= icmp_ln9_reg_464_pp0_iter14_reg;
                icmp_ln9_reg_464_pp0_iter16_reg <= icmp_ln9_reg_464_pp0_iter15_reg;
                icmp_ln9_reg_464_pp0_iter17_reg <= icmp_ln9_reg_464_pp0_iter16_reg;
                icmp_ln9_reg_464_pp0_iter1_reg <= icmp_ln9_reg_464;
                icmp_ln9_reg_464_pp0_iter2_reg <= icmp_ln9_reg_464_pp0_iter1_reg;
                icmp_ln9_reg_464_pp0_iter3_reg <= icmp_ln9_reg_464_pp0_iter2_reg;
                icmp_ln9_reg_464_pp0_iter4_reg <= icmp_ln9_reg_464_pp0_iter3_reg;
                icmp_ln9_reg_464_pp0_iter5_reg <= icmp_ln9_reg_464_pp0_iter4_reg;
                icmp_ln9_reg_464_pp0_iter6_reg <= icmp_ln9_reg_464_pp0_iter5_reg;
                icmp_ln9_reg_464_pp0_iter7_reg <= icmp_ln9_reg_464_pp0_iter6_reg;
                icmp_ln9_reg_464_pp0_iter8_reg <= icmp_ln9_reg_464_pp0_iter7_reg;
                icmp_ln9_reg_464_pp0_iter9_reg <= icmp_ln9_reg_464_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                cmp18_not_reg_459 <= cmp18_not_fu_221_p2;
                cmp3_not_reg_454 <= cmp3_not_fu_215_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln9_reg_464_pp0_iter14_reg = ap_const_lv1_0))) then
                delta_reg_661 <= grp_fu_203_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_464_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                left_reg_581 <= temp_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_464_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                mul1_reg_636 <= grp_fu_209_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_464_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul2_reg_641 <= grp_fu_209_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_464_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                mul3_reg_606 <= grp_fu_203_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                mul3_reg_606_pp0_iter10_reg <= mul3_reg_606_pp0_iter9_reg;
                mul3_reg_606_pp0_iter5_reg <= mul3_reg_606;
                mul3_reg_606_pp0_iter6_reg <= mul3_reg_606_pp0_iter5_reg;
                mul3_reg_606_pp0_iter7_reg <= mul3_reg_606_pp0_iter6_reg;
                mul3_reg_606_pp0_iter8_reg <= mul3_reg_606_pp0_iter7_reg;
                mul3_reg_606_pp0_iter9_reg <= mul3_reg_606_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_464_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul_reg_586 <= grp_fu_203_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_464_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                power_load_reg_631 <= power_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_fu_227_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                select_ln9_1_reg_495 <= select_ln9_1_fu_259_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_464_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                sub1_reg_616 <= grp_fu_195_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_464_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                sub2_reg_596 <= grp_fu_190_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_464_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                sub_reg_611 <= grp_fu_195_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_464_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    zext_ln13_reg_621(14 downto 0) <= zext_ln13_fu_450_p1(14 downto 0);
            end if;
        end if;
    end process;
    zext_ln13_reg_621(63 downto 15) <= "0000000000000000000000000000000000000000000000000";
    zext_ln13_reg_621_pp0_iter7_reg(63 downto 15) <= "0000000000000000000000000000000000000000000000000";
    zext_ln13_reg_621_pp0_iter8_reg(63 downto 15) <= "0000000000000000000000000000000000000000000000000";
    zext_ln13_reg_621_pp0_iter9_reg(63 downto 15) <= "0000000000000000000000000000000000000000000000000";
    zext_ln13_reg_621_pp0_iter10_reg(63 downto 15) <= "0000000000000000000000000000000000000000000000000";
    zext_ln13_reg_621_pp0_iter11_reg(63 downto 15) <= "0000000000000000000000000000000000000000000000000";
    zext_ln13_reg_621_pp0_iter12_reg(63 downto 15) <= "0000000000000000000000000000000000000000000000000";
    zext_ln13_reg_621_pp0_iter13_reg(63 downto 15) <= "0000000000000000000000000000000000000000000000000";
    zext_ln13_reg_621_pp0_iter14_reg(63 downto 15) <= "0000000000000000000000000000000000000000000000000";
    zext_ln13_reg_621_pp0_iter15_reg(63 downto 15) <= "0000000000000000000000000000000000000000000000000";
    zext_ln13_reg_621_pp0_iter16_reg(63 downto 15) <= "0000000000000000000000000000000000000000000000000";
    zext_ln13_reg_621_pp0_iter17_reg(63 downto 15) <= "0000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln9_fu_227_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_subdone, ap_block_pp0_stage2_subdone, ap_enable_reg_pp0_iter18, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln9_fu_227_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln9_fu_227_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln10_fu_423_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(select_ln9_reg_479));
    add_ln12_fu_338_p2 <= std_logic_vector(unsigned(zext_ln12_fu_334_p1) + unsigned(zext_ln9_fu_290_p1));
    add_ln13_cast_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_fu_344_p2),16));
    add_ln13_fu_344_p2 <= std_logic_vector(unsigned(c_cast_fu_326_p1) + unsigned(p_mid2_fu_283_p3));
    add_ln14_fu_406_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(add_ln12_reg_515));
    add_ln15_fu_378_p2 <= std_logic_vector(unsigned(zext_ln15_fu_374_p1) + unsigned(zext_ln9_fu_290_p1));
    add_ln16_fu_433_p2 <= std_logic_vector(signed(ap_const_lv16_FFFF) + signed(add_ln12_reg_515));
    add_ln9_1_fu_253_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(ap_phi_mux_r_phi_fu_172_p4));
    add_ln9_fu_233_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_161_p4) + unsigned(ap_const_lv16_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state57 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage2_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage2_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage2_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage1_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage2_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage1_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage2_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage1_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage2_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage1_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage2_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage1_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage2_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage1_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage2_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage1_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage2_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp0_stage1_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp0_stage2_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln9_fu_227_p2)
    begin
        if ((icmp_ln9_fu_227_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state57)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state57) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter18)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_phi_fu_183_p4_assign_proc : process(c_reg_179, icmp_ln9_reg_464, ap_CS_fsm_pp0_stage0, add_ln10_reg_559, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln9_reg_464 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_c_phi_fu_183_p4 <= add_ln10_reg_559;
        else 
            ap_phi_mux_c_phi_fu_183_p4 <= c_reg_179;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_161_p4_assign_proc : process(indvar_flatten_reg_157, icmp_ln9_reg_464, ap_CS_fsm_pp0_stage0, add_ln9_reg_468, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln9_reg_464 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_161_p4 <= add_ln9_reg_468;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_161_p4 <= indvar_flatten_reg_157;
        end if; 
    end process;


    ap_phi_mux_r_phi_fu_172_p4_assign_proc : process(r_reg_168, icmp_ln9_reg_464, ap_CS_fsm_pp0_stage0, select_ln9_1_reg_495, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln9_reg_464 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_r_phi_fu_172_p4 <= select_ln9_1_reg_495;
        else 
            ap_phi_mux_r_phi_fu_172_p4 <= r_reg_168;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state57)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bottom_fu_384_p3 <= 
        add_ln15_fu_378_p2 when (or_ln9_1_fu_321_p2(0) = '1') else 
        add_ln12_fu_338_p2;
    c_cast_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln9_reg_479),15));
    cmp18_not_fu_221_p2 <= "0" when (which_boundary = ap_const_lv3_7) else "1";
    cmp19_not5_fu_277_p2 <= "0" when (ap_phi_mux_r_phi_fu_172_p4 = ap_const_lv7_3F) else "1";
    cmp19_not_mid1_fu_310_p2 <= "0" when (add_ln9_1_reg_489 = ap_const_lv7_3F) else "1";
    cmp3_not_fu_215_p2 <= "0" when (which_boundary = ap_const_lv3_0) else "1";
    cmp4_not6_fu_271_p2 <= "0" when (ap_phi_mux_r_phi_fu_172_p4 = ap_const_lv7_0) else "1";
    cmp4_not_mid1_fu_294_p2 <= "0" when (add_ln9_1_reg_489 = ap_const_lv7_0) else "1";

    grp_fu_190_opcode_assign_proc : process(icmp_ln9_reg_464, ap_CS_fsm_pp0_stage0, icmp_ln9_reg_464_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_00001, ap_block_pp0_stage2_00001, ap_block_pp0_stage1_00001)
    begin
        if (((icmp_ln9_reg_464_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_00001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_190_opcode <= ap_const_lv2_1;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_00001) and (icmp_ln9_reg_464 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln9_reg_464_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_00001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_190_opcode <= ap_const_lv2_0;
        else 
            grp_fu_190_opcode <= "XX";
        end if; 
    end process;


    grp_fu_190_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, top_1_reg_544, ap_enable_reg_pp0_iter1, right_reg_571, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_190_p0 <= right_reg_571;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_190_p0 <= ap_const_lv32_42A00000;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_190_p0 <= top_1_reg_544;
            else 
                grp_fu_190_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_190_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_190_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, bottom_1_reg_554, center_reg_564, ap_enable_reg_pp0_iter1, left_reg_581, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_190_p1 <= left_reg_581;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_190_p1 <= center_reg_564;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_190_p1 <= bottom_1_reg_554;
            else 
                grp_fu_190_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_190_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_195_opcode_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln9_reg_464_pp0_iter3_reg, icmp_ln9_reg_464_pp0_iter11_reg, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_00001, ap_block_pp0_stage2_00001, ap_block_pp0_stage1_00001)
    begin
        if ((((icmp_ln9_reg_464_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_00001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((icmp_ln9_reg_464_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_00001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_195_opcode <= ap_const_lv2_1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_00001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln9_reg_464_pp0_iter11_reg = ap_const_lv1_0))) then 
            grp_fu_195_opcode <= ap_const_lv2_0;
        else 
            grp_fu_195_opcode <= "XX";
        end if; 
    end process;


    grp_fu_195_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, add_reg_591, ap_enable_reg_pp0_iter3, add2_reg_601, ap_enable_reg_pp0_iter4, add3_reg_651, ap_enable_reg_pp0_iter11, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_195_p0 <= add3_reg_651;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_195_p0 <= add2_reg_601;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_195_p0 <= add_reg_591;
        else 
            grp_fu_195_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_195_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, mul_reg_586, mul_reg_586_pp0_iter3_reg, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, mul3_reg_606_pp0_iter10_reg, ap_enable_reg_pp0_iter11, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_195_p1 <= mul3_reg_606_pp0_iter10_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_195_p1 <= mul_reg_586_pp0_iter3_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_195_p1 <= mul_reg_586;
        else 
            grp_fu_195_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_199_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, center_reg_564_pp0_iter15_reg, power_load_reg_631, ap_enable_reg_pp0_iter7, add1_reg_646, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter15, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_199_p0 <= center_reg_564_pp0_iter15_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_199_p0 <= add1_reg_646;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_199_p0 <= power_load_reg_631;
        else 
            grp_fu_199_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_199_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, mul1_reg_636, ap_enable_reg_pp0_iter7, mul2_reg_641_pp0_iter8_reg, ap_enable_reg_pp0_iter9, delta_reg_661, ap_enable_reg_pp0_iter15, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_199_p1 <= delta_reg_661;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_199_p1 <= mul2_reg_641_pp0_iter8_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_199_p1 <= mul1_reg_636;
        else 
            grp_fu_199_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_203_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, center_reg_564, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, sub2_reg_596, add4_reg_656, ap_enable_reg_pp0_iter14, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_203_p0 <= add4_reg_656;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_203_p0 <= sub2_reg_596;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_203_p0 <= center_reg_564;
        else 
            grp_fu_203_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_203_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter14, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_203_p1 <= ap_const_lv32_3D0BCF64;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_203_p1 <= ap_const_lv32_394CCCCD;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_203_p1 <= ap_const_lv32_40000000;
        else 
            grp_fu_203_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_209_p0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, sub_reg_611, ap_enable_reg_pp0_iter5, sub1_reg_616, ap_enable_reg_pp0_iter6, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_209_p0 <= sub1_reg_616;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_209_p0 <= sub_reg_611;
        else 
            grp_fu_209_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln10_fu_239_p2 <= "1" when (ap_phi_mux_c_phi_fu_183_p4 = ap_const_lv10_200) else "0";
    icmp_ln14_fu_401_p2 <= "1" when (select_ln9_reg_479 = ap_const_lv10_1FF) else "0";
    icmp_ln16_fu_428_p2 <= "1" when (select_ln9_reg_479 = ap_const_lv10_0) else "0";
    icmp_ln9_fu_227_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_161_p4 = ap_const_lv16_8000) else "0";
    or_ln9_1_fu_321_p2 <= (select_ln9_3_fu_315_p3 or cmp18_not_reg_459);
    or_ln9_fu_305_p2 <= (select_ln9_2_fu_299_p3 or cmp3_not_reg_454);
    or_ln_fu_367_p3 <= (ap_const_lv1_1 & select_ln9_reg_479);
    p_mid2_fu_283_p3 <= (trunc_ln9_reg_500 & ap_const_lv9_0);
    power_address0 <= zext_ln13_fu_450_p1(15 - 1 downto 0);

    power_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            power_ce0 <= ap_const_logic_1;
        else 
            power_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_address0 <= zext_ln13_reg_621_pp0_iter17_reg(15 - 1 downto 0);

    result_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter18)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            result_ce0 <= ap_const_logic_1;
        else 
            result_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_d0 <= add5_reg_666;

    result_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln9_reg_464_pp0_iter17_reg, ap_enable_reg_pp0_iter18)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln9_reg_464_pp0_iter17_reg = ap_const_lv1_0))) then 
            result_we0 <= ap_const_logic_1;
        else 
            result_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln14_fu_411_p3 <= 
        add_ln12_reg_515 when (icmp_ln14_fu_401_p2(0) = '1') else 
        add_ln14_fu_406_p2;
    select_ln16_fu_438_p3 <= 
        add_ln12_reg_515 when (icmp_ln16_fu_428_p2(0) = '1') else 
        add_ln16_fu_433_p2;
    select_ln9_1_fu_259_p3 <= 
        add_ln9_1_fu_253_p2 when (icmp_ln10_fu_239_p2(0) = '1') else 
        ap_phi_mux_r_phi_fu_172_p4;
    select_ln9_2_fu_299_p3 <= 
        cmp4_not_mid1_fu_294_p2 when (icmp_ln10_reg_473(0) = '1') else 
        cmp4_not6_reg_505;
    select_ln9_3_fu_315_p3 <= 
        cmp19_not_mid1_fu_310_p2 when (icmp_ln10_reg_473(0) = '1') else 
        cmp19_not5_reg_510;
    select_ln9_fu_245_p3 <= 
        ap_const_lv10_0 when (icmp_ln10_fu_239_p2(0) = '1') else 
        ap_phi_mux_c_phi_fu_183_p4;

    temp_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln15_1_fu_392_p1, zext_ln12_1_fu_397_p1, ap_block_pp0_stage2, zext_ln12_3_fu_445_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_address0 <= zext_ln12_3_fu_445_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            temp_address0 <= zext_ln12_1_fu_397_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            temp_address0 <= zext_ln15_1_fu_392_p1(16 - 1 downto 0);
        else 
            temp_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp_address1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, zext_ln13_1_fu_362_p1, ap_block_pp0_stage1, ap_block_pp0_stage2, zext_ln12_2_fu_418_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                temp_address1 <= zext_ln12_2_fu_418_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                temp_address1 <= zext_ln13_1_fu_362_p1(16 - 1 downto 0);
            else 
                temp_address1 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            temp_address1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            temp_ce0 <= ap_const_logic_1;
        else 
            temp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            temp_ce1 <= ap_const_logic_1;
        else 
            temp_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    top_fu_354_p3 <= 
        add_ln13_cast_fu_350_p1 when (or_ln9_fu_305_p2(0) = '1') else 
        add_ln12_fu_338_p2;
    trunc_ln9_fu_267_p1 <= select_ln9_1_fu_259_p3(6 - 1 downto 0);
    xor_ln12_fu_329_p2 <= (select_ln9_reg_479 xor ap_const_lv10_200);
    zext_ln12_1_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln12_reg_515),64));
    zext_ln12_2_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln14_fu_411_p3),64));
    zext_ln12_3_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln16_fu_438_p3),64));
    zext_ln12_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln12_fu_329_p2),16));
    zext_ln13_1_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(top_fu_354_p3),64));
    zext_ln13_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_reg_524_pp0_iter5_reg),64));
    zext_ln15_1_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bottom_fu_384_p3),64));
    zext_ln15_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_367_p3),16));
    zext_ln9_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_mid2_fu_283_p3),16));
end behav;
