-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity workload_buffer_store_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_result1_AWVALID : OUT STD_LOGIC;
    m_axi_result1_AWREADY : IN STD_LOGIC;
    m_axi_result1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_result1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_result1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_result1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_result1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_result1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_result1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_result1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_result1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_result1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_result1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_result1_WVALID : OUT STD_LOGIC;
    m_axi_result1_WREADY : IN STD_LOGIC;
    m_axi_result1_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_result1_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_result1_WLAST : OUT STD_LOGIC;
    m_axi_result1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_result1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_result1_ARVALID : OUT STD_LOGIC;
    m_axi_result1_ARREADY : IN STD_LOGIC;
    m_axi_result1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_result1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_result1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_result1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_result1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_result1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_result1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_result1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_result1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_result1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_result1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_result1_RVALID : IN STD_LOGIC;
    m_axi_result1_RREADY : OUT STD_LOGIC;
    m_axi_result1_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_result1_RLAST : IN STD_LOGIC;
    m_axi_result1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_result1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_result1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_result1_BVALID : IN STD_LOGIC;
    m_axi_result1_BREADY : OUT STD_LOGIC;
    m_axi_result1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_result1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_result1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    flag : IN STD_LOGIC_VECTOR (0 downto 0);
    k : IN STD_LOGIC_VECTOR (3 downto 0);
    result_dest : IN STD_LOGIC_VECTOR (63 downto 0);
    result_src_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    result_src_0_ce0 : OUT STD_LOGIC;
    result_src_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    result_src_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    result_src_1_ce0 : OUT STD_LOGIC;
    result_src_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    result_src_2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    result_src_2_ce0 : OUT STD_LOGIC;
    result_src_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    result_src_3_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    result_src_3_ce0 : OUT STD_LOGIC;
    result_src_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    result_src_4_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    result_src_4_ce0 : OUT STD_LOGIC;
    result_src_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    result_src_5_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    result_src_5_ce0 : OUT STD_LOGIC;
    result_src_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    result_src_6_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    result_src_6_ce0 : OUT STD_LOGIC;
    result_src_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    result_src_7_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    result_src_7_ce0 : OUT STD_LOGIC;
    result_src_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    result_src_8_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    result_src_8_ce0 : OUT STD_LOGIC;
    result_src_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    result_src_9_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    result_src_9_ce0 : OUT STD_LOGIC;
    result_src_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    result_src_10_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    result_src_10_ce0 : OUT STD_LOGIC;
    result_src_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    result_src_11_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    result_src_11_ce0 : OUT STD_LOGIC;
    result_src_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    result_src_12_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    result_src_12_ce0 : OUT STD_LOGIC;
    result_src_12_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    result_src_13_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    result_src_13_ce0 : OUT STD_LOGIC;
    result_src_13_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    result_src_14_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    result_src_14_ce0 : OUT STD_LOGIC;
    result_src_14_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    result_src_15_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    result_src_15_ce0 : OUT STD_LOGIC;
    result_src_15_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of workload_buffer_store_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (70 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (70 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (70 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (70 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (70 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (70 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (70 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (70 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (70 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (70 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (70 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_800 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000000000";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv12_800 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal result1_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal result1_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln2095_reg_525 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2095_reg_525_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal result1_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal flag_read_read_fu_114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_344 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln_reg_514 : STD_LOGIC_VECTOR (57 downto 0);
    signal icmp_ln2095_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_3_fu_399_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal result_src_0_load_reg_614 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_src_1_load_reg_619 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_src_2_load_reg_624 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_src_3_load_reg_629 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_src_4_load_reg_634 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_src_5_load_reg_639 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_src_6_load_reg_644 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_src_7_load_reg_649 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_src_8_load_reg_654 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_src_9_load_reg_659 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_src_10_load_reg_664 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_src_11_load_reg_669 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_src_12_load_reg_674 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_src_13_load_reg_679 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_src_14_load_reg_684 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_src_15_load_reg_689 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal zext_ln2095_fu_405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln2095_fu_383_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state73 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_fu_355_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_cast_fu_363_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_367_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln2101_15_fu_470_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln2101_14_fu_467_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln2101_13_fu_464_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln2101_12_fu_461_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln2101_11_fu_458_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln2101_10_fu_455_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln2101_9_fu_452_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln2101_8_fu_449_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln2101_7_fu_446_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln2101_6_fu_443_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln2101_5_fu_440_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln2101_4_fu_437_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln2101_3_fu_434_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln2101_2_fu_431_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln2101_1_fu_428_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln2101_fu_425_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (70 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((m_axi_result1_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((m_axi_result1_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_344_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln2095_fu_393_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_344 <= i_3_fu_399_p2;
            elsif (((m_axi_result1_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_344 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln2095_reg_525 <= icmp_ln2095_fu_393_p2;
                icmp_ln2095_reg_525_pp0_iter1_reg <= icmp_ln2095_reg_525;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln2095_reg_525 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                result_src_0_load_reg_614 <= result_src_0_q0;
                result_src_10_load_reg_664 <= result_src_10_q0;
                result_src_11_load_reg_669 <= result_src_11_q0;
                result_src_12_load_reg_674 <= result_src_12_q0;
                result_src_13_load_reg_679 <= result_src_13_q0;
                result_src_14_load_reg_684 <= result_src_14_q0;
                result_src_15_load_reg_689 <= result_src_15_q0;
                result_src_1_load_reg_619 <= result_src_1_q0;
                result_src_2_load_reg_624 <= result_src_2_q0;
                result_src_3_load_reg_629 <= result_src_3_q0;
                result_src_4_load_reg_634 <= result_src_4_q0;
                result_src_5_load_reg_639 <= result_src_5_q0;
                result_src_6_load_reg_644 <= result_src_6_q0;
                result_src_7_load_reg_649 <= result_src_7_q0;
                result_src_8_load_reg_654 <= result_src_8_q0;
                result_src_9_load_reg_659 <= result_src_9_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (flag = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                trunc_ln_reg_514 <= empty_fu_367_p2(63 downto 6);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_result1_AWREADY, m_axi_result1_BVALID, flag, ap_CS_fsm_state2, ap_enable_reg_pp0_iter2, ap_CS_fsm_state73, flag_read_read_fu_114_p2, icmp_ln2095_fu_393_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (flag_read_read_fu_114_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state73;
                elsif (((ap_start = ap_const_logic_1) and (flag = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((m_axi_result1_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln2095_fu_393_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln2095_fu_393_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                if ((not(((flag = ap_const_lv1_1) and (m_axi_result1_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state73))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state73;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state73 <= ap_CS_fsm(70);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(m_axi_result1_WREADY, icmp_ln2095_reg_525_pp0_iter1_reg)
    begin
                ap_block_state5_io <= ((icmp_ln2095_reg_525_pp0_iter1_reg = ap_const_lv1_0) and (m_axi_result1_WREADY = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state73_assign_proc : process(m_axi_result1_BVALID, flag)
    begin
                ap_block_state73 <= ((flag = ap_const_lv1_1) and (m_axi_result1_BVALID = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln2095_fu_393_p2)
    begin
        if ((icmp_ln2095_fu_393_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_result1_BVALID, flag, ap_CS_fsm_state73)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((flag = ap_const_lv1_1) and (m_axi_result1_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state73)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_result1_BVALID, flag, ap_CS_fsm_state73)
    begin
        if ((not(((flag = ap_const_lv1_1) and (m_axi_result1_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln2101_10_fu_455_p1 <= result_src_10_load_reg_664;
    bitcast_ln2101_11_fu_458_p1 <= result_src_11_load_reg_669;
    bitcast_ln2101_12_fu_461_p1 <= result_src_12_load_reg_674;
    bitcast_ln2101_13_fu_464_p1 <= result_src_13_load_reg_679;
    bitcast_ln2101_14_fu_467_p1 <= result_src_14_load_reg_684;
    bitcast_ln2101_15_fu_470_p1 <= result_src_15_load_reg_689;
    bitcast_ln2101_1_fu_428_p1 <= result_src_1_load_reg_619;
    bitcast_ln2101_2_fu_431_p1 <= result_src_2_load_reg_624;
    bitcast_ln2101_3_fu_434_p1 <= result_src_3_load_reg_629;
    bitcast_ln2101_4_fu_437_p1 <= result_src_4_load_reg_634;
    bitcast_ln2101_5_fu_440_p1 <= result_src_5_load_reg_639;
    bitcast_ln2101_6_fu_443_p1 <= result_src_6_load_reg_644;
    bitcast_ln2101_7_fu_446_p1 <= result_src_7_load_reg_649;
    bitcast_ln2101_8_fu_449_p1 <= result_src_8_load_reg_654;
    bitcast_ln2101_9_fu_452_p1 <= result_src_9_load_reg_659;
    bitcast_ln2101_fu_425_p1 <= result_src_0_load_reg_614;
    empty_fu_367_p2 <= std_logic_vector(signed(p_cast_fu_363_p1) + signed(result_dest));
    flag_read_read_fu_114_p2 <= flag;
    i_3_fu_399_p2 <= std_logic_vector(unsigned(i_reg_344) + unsigned(ap_const_lv12_1));
    icmp_ln2095_fu_393_p2 <= "1" when (i_reg_344 = ap_const_lv12_800) else "0";
    m_axi_result1_ARADDR <= ap_const_lv64_0;
    m_axi_result1_ARBURST <= ap_const_lv2_0;
    m_axi_result1_ARCACHE <= ap_const_lv4_0;
    m_axi_result1_ARID <= ap_const_lv1_0;
    m_axi_result1_ARLEN <= ap_const_lv32_0;
    m_axi_result1_ARLOCK <= ap_const_lv2_0;
    m_axi_result1_ARPROT <= ap_const_lv3_0;
    m_axi_result1_ARQOS <= ap_const_lv4_0;
    m_axi_result1_ARREGION <= ap_const_lv4_0;
    m_axi_result1_ARSIZE <= ap_const_lv3_0;
    m_axi_result1_ARUSER <= ap_const_lv1_0;
    m_axi_result1_ARVALID <= ap_const_logic_0;
    m_axi_result1_AWADDR <= sext_ln2095_fu_383_p1;
    m_axi_result1_AWBURST <= ap_const_lv2_0;
    m_axi_result1_AWCACHE <= ap_const_lv4_0;
    m_axi_result1_AWID <= ap_const_lv1_0;
    m_axi_result1_AWLEN <= ap_const_lv32_800;
    m_axi_result1_AWLOCK <= ap_const_lv2_0;
    m_axi_result1_AWPROT <= ap_const_lv3_0;
    m_axi_result1_AWQOS <= ap_const_lv4_0;
    m_axi_result1_AWREGION <= ap_const_lv4_0;
    m_axi_result1_AWSIZE <= ap_const_lv3_0;
    m_axi_result1_AWUSER <= ap_const_lv1_0;

    m_axi_result1_AWVALID_assign_proc : process(m_axi_result1_AWREADY, ap_CS_fsm_state2)
    begin
        if (((m_axi_result1_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_result1_AWVALID <= ap_const_logic_1;
        else 
            m_axi_result1_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_result1_BREADY_assign_proc : process(m_axi_result1_BVALID, flag, ap_CS_fsm_state73)
    begin
        if ((not(((flag = ap_const_lv1_1) and (m_axi_result1_BVALID = ap_const_logic_0))) and (flag = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            m_axi_result1_BREADY <= ap_const_logic_1;
        else 
            m_axi_result1_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_result1_RREADY <= ap_const_logic_0;
    m_axi_result1_WDATA <= (((((((((((((((bitcast_ln2101_15_fu_470_p1 & bitcast_ln2101_14_fu_467_p1) & bitcast_ln2101_13_fu_464_p1) & bitcast_ln2101_12_fu_461_p1) & bitcast_ln2101_11_fu_458_p1) & bitcast_ln2101_10_fu_455_p1) & bitcast_ln2101_9_fu_452_p1) & bitcast_ln2101_8_fu_449_p1) & bitcast_ln2101_7_fu_446_p1) & bitcast_ln2101_6_fu_443_p1) & bitcast_ln2101_5_fu_440_p1) & bitcast_ln2101_4_fu_437_p1) & bitcast_ln2101_3_fu_434_p1) & bitcast_ln2101_2_fu_431_p1) & bitcast_ln2101_1_fu_428_p1) & bitcast_ln2101_fu_425_p1);
    m_axi_result1_WID <= ap_const_lv1_0;
    m_axi_result1_WLAST <= ap_const_logic_0;
    m_axi_result1_WSTRB <= ap_const_lv64_FFFFFFFFFFFFFFFF;
    m_axi_result1_WUSER <= ap_const_lv1_0;

    m_axi_result1_WVALID_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln2095_reg_525_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln2095_reg_525_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            m_axi_result1_WVALID <= ap_const_logic_1;
        else 
            m_axi_result1_WVALID <= ap_const_logic_0;
        end if; 
    end process;

        p_cast_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_355_p3),64));


    result1_blk_n_AW_assign_proc : process(m_axi_result1_AWREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            result1_blk_n_AW <= m_axi_result1_AWREADY;
        else 
            result1_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    result1_blk_n_B_assign_proc : process(m_axi_result1_BVALID, flag, ap_CS_fsm_state73)
    begin
        if (((flag = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            result1_blk_n_B <= m_axi_result1_BVALID;
        else 
            result1_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    result1_blk_n_W_assign_proc : process(m_axi_result1_WREADY, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, icmp_ln2095_reg_525_pp0_iter1_reg)
    begin
        if (((icmp_ln2095_reg_525_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            result1_blk_n_W <= m_axi_result1_WREADY;
        else 
            result1_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    result_src_0_address0 <= zext_ln2095_fu_405_p1(11 - 1 downto 0);

    result_src_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            result_src_0_ce0 <= ap_const_logic_1;
        else 
            result_src_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_src_10_address0 <= zext_ln2095_fu_405_p1(11 - 1 downto 0);

    result_src_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            result_src_10_ce0 <= ap_const_logic_1;
        else 
            result_src_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_src_11_address0 <= zext_ln2095_fu_405_p1(11 - 1 downto 0);

    result_src_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            result_src_11_ce0 <= ap_const_logic_1;
        else 
            result_src_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_src_12_address0 <= zext_ln2095_fu_405_p1(11 - 1 downto 0);

    result_src_12_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            result_src_12_ce0 <= ap_const_logic_1;
        else 
            result_src_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_src_13_address0 <= zext_ln2095_fu_405_p1(11 - 1 downto 0);

    result_src_13_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            result_src_13_ce0 <= ap_const_logic_1;
        else 
            result_src_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_src_14_address0 <= zext_ln2095_fu_405_p1(11 - 1 downto 0);

    result_src_14_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            result_src_14_ce0 <= ap_const_logic_1;
        else 
            result_src_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_src_15_address0 <= zext_ln2095_fu_405_p1(11 - 1 downto 0);

    result_src_15_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            result_src_15_ce0 <= ap_const_logic_1;
        else 
            result_src_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_src_1_address0 <= zext_ln2095_fu_405_p1(11 - 1 downto 0);

    result_src_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            result_src_1_ce0 <= ap_const_logic_1;
        else 
            result_src_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_src_2_address0 <= zext_ln2095_fu_405_p1(11 - 1 downto 0);

    result_src_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            result_src_2_ce0 <= ap_const_logic_1;
        else 
            result_src_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_src_3_address0 <= zext_ln2095_fu_405_p1(11 - 1 downto 0);

    result_src_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            result_src_3_ce0 <= ap_const_logic_1;
        else 
            result_src_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_src_4_address0 <= zext_ln2095_fu_405_p1(11 - 1 downto 0);

    result_src_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            result_src_4_ce0 <= ap_const_logic_1;
        else 
            result_src_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_src_5_address0 <= zext_ln2095_fu_405_p1(11 - 1 downto 0);

    result_src_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            result_src_5_ce0 <= ap_const_logic_1;
        else 
            result_src_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_src_6_address0 <= zext_ln2095_fu_405_p1(11 - 1 downto 0);

    result_src_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            result_src_6_ce0 <= ap_const_logic_1;
        else 
            result_src_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_src_7_address0 <= zext_ln2095_fu_405_p1(11 - 1 downto 0);

    result_src_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            result_src_7_ce0 <= ap_const_logic_1;
        else 
            result_src_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_src_8_address0 <= zext_ln2095_fu_405_p1(11 - 1 downto 0);

    result_src_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            result_src_8_ce0 <= ap_const_logic_1;
        else 
            result_src_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_src_9_address0 <= zext_ln2095_fu_405_p1(11 - 1 downto 0);

    result_src_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            result_src_9_ce0 <= ap_const_logic_1;
        else 
            result_src_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln2095_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_514),64));

    tmp_fu_355_p3 <= (k & ap_const_lv17_0);
    zext_ln2095_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_344),64));
end behav;
