// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module workload_buffer_load_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_temp1_AWVALID,
        m_axi_temp1_AWREADY,
        m_axi_temp1_AWADDR,
        m_axi_temp1_AWID,
        m_axi_temp1_AWLEN,
        m_axi_temp1_AWSIZE,
        m_axi_temp1_AWBURST,
        m_axi_temp1_AWLOCK,
        m_axi_temp1_AWCACHE,
        m_axi_temp1_AWPROT,
        m_axi_temp1_AWQOS,
        m_axi_temp1_AWREGION,
        m_axi_temp1_AWUSER,
        m_axi_temp1_WVALID,
        m_axi_temp1_WREADY,
        m_axi_temp1_WDATA,
        m_axi_temp1_WSTRB,
        m_axi_temp1_WLAST,
        m_axi_temp1_WID,
        m_axi_temp1_WUSER,
        m_axi_temp1_ARVALID,
        m_axi_temp1_ARREADY,
        m_axi_temp1_ARADDR,
        m_axi_temp1_ARID,
        m_axi_temp1_ARLEN,
        m_axi_temp1_ARSIZE,
        m_axi_temp1_ARBURST,
        m_axi_temp1_ARLOCK,
        m_axi_temp1_ARCACHE,
        m_axi_temp1_ARPROT,
        m_axi_temp1_ARQOS,
        m_axi_temp1_ARREGION,
        m_axi_temp1_ARUSER,
        m_axi_temp1_RVALID,
        m_axi_temp1_RREADY,
        m_axi_temp1_RDATA,
        m_axi_temp1_RLAST,
        m_axi_temp1_RID,
        m_axi_temp1_RUSER,
        m_axi_temp1_RRESP,
        m_axi_temp1_BVALID,
        m_axi_temp1_BREADY,
        m_axi_temp1_BRESP,
        m_axi_temp1_BID,
        m_axi_temp1_BUSER,
        m_axi_power1_AWVALID,
        m_axi_power1_AWREADY,
        m_axi_power1_AWADDR,
        m_axi_power1_AWID,
        m_axi_power1_AWLEN,
        m_axi_power1_AWSIZE,
        m_axi_power1_AWBURST,
        m_axi_power1_AWLOCK,
        m_axi_power1_AWCACHE,
        m_axi_power1_AWPROT,
        m_axi_power1_AWQOS,
        m_axi_power1_AWREGION,
        m_axi_power1_AWUSER,
        m_axi_power1_WVALID,
        m_axi_power1_WREADY,
        m_axi_power1_WDATA,
        m_axi_power1_WSTRB,
        m_axi_power1_WLAST,
        m_axi_power1_WID,
        m_axi_power1_WUSER,
        m_axi_power1_ARVALID,
        m_axi_power1_ARREADY,
        m_axi_power1_ARADDR,
        m_axi_power1_ARID,
        m_axi_power1_ARLEN,
        m_axi_power1_ARSIZE,
        m_axi_power1_ARBURST,
        m_axi_power1_ARLOCK,
        m_axi_power1_ARCACHE,
        m_axi_power1_ARPROT,
        m_axi_power1_ARQOS,
        m_axi_power1_ARREGION,
        m_axi_power1_ARUSER,
        m_axi_power1_RVALID,
        m_axi_power1_RREADY,
        m_axi_power1_RDATA,
        m_axi_power1_RLAST,
        m_axi_power1_RID,
        m_axi_power1_RUSER,
        m_axi_power1_RRESP,
        m_axi_power1_BVALID,
        m_axi_power1_BREADY,
        m_axi_power1_BRESP,
        m_axi_power1_BID,
        m_axi_power1_BUSER,
        flag,
        k,
        temp_dest_address0,
        temp_dest_ce0,
        temp_dest_we0,
        temp_dest_d0,
        temp_dest_1_address0,
        temp_dest_1_ce0,
        temp_dest_1_we0,
        temp_dest_1_d0,
        temp_dest_2_address0,
        temp_dest_2_ce0,
        temp_dest_2_we0,
        temp_dest_2_d0,
        temp_dest_3_address0,
        temp_dest_3_ce0,
        temp_dest_3_we0,
        temp_dest_3_d0,
        temp_dest_4_address0,
        temp_dest_4_ce0,
        temp_dest_4_we0,
        temp_dest_4_d0,
        temp_dest_5_address0,
        temp_dest_5_ce0,
        temp_dest_5_we0,
        temp_dest_5_d0,
        temp_dest_6_address0,
        temp_dest_6_ce0,
        temp_dest_6_we0,
        temp_dest_6_d0,
        temp_dest_7_address0,
        temp_dest_7_ce0,
        temp_dest_7_we0,
        temp_dest_7_d0,
        temp_dest_8_address0,
        temp_dest_8_ce0,
        temp_dest_8_we0,
        temp_dest_8_d0,
        temp_dest_9_address0,
        temp_dest_9_ce0,
        temp_dest_9_we0,
        temp_dest_9_d0,
        temp_dest_10_address0,
        temp_dest_10_ce0,
        temp_dest_10_we0,
        temp_dest_10_d0,
        temp_dest_11_address0,
        temp_dest_11_ce0,
        temp_dest_11_we0,
        temp_dest_11_d0,
        temp_dest_12_address0,
        temp_dest_12_ce0,
        temp_dest_12_we0,
        temp_dest_12_d0,
        temp_dest_13_address0,
        temp_dest_13_ce0,
        temp_dest_13_we0,
        temp_dest_13_d0,
        temp_dest_14_address0,
        temp_dest_14_ce0,
        temp_dest_14_we0,
        temp_dest_14_d0,
        temp_dest_15_address0,
        temp_dest_15_ce0,
        temp_dest_15_we0,
        temp_dest_15_d0,
        temp_src,
        power_dest_address0,
        power_dest_ce0,
        power_dest_we0,
        power_dest_d0,
        power_dest_1_address0,
        power_dest_1_ce0,
        power_dest_1_we0,
        power_dest_1_d0,
        power_dest_2_address0,
        power_dest_2_ce0,
        power_dest_2_we0,
        power_dest_2_d0,
        power_dest_3_address0,
        power_dest_3_ce0,
        power_dest_3_we0,
        power_dest_3_d0,
        power_dest_4_address0,
        power_dest_4_ce0,
        power_dest_4_we0,
        power_dest_4_d0,
        power_dest_5_address0,
        power_dest_5_ce0,
        power_dest_5_we0,
        power_dest_5_d0,
        power_dest_6_address0,
        power_dest_6_ce0,
        power_dest_6_we0,
        power_dest_6_d0,
        power_dest_7_address0,
        power_dest_7_ce0,
        power_dest_7_we0,
        power_dest_7_d0,
        power_dest_8_address0,
        power_dest_8_ce0,
        power_dest_8_we0,
        power_dest_8_d0,
        power_dest_9_address0,
        power_dest_9_ce0,
        power_dest_9_we0,
        power_dest_9_d0,
        power_dest_10_address0,
        power_dest_10_ce0,
        power_dest_10_we0,
        power_dest_10_d0,
        power_dest_11_address0,
        power_dest_11_ce0,
        power_dest_11_we0,
        power_dest_11_d0,
        power_dest_12_address0,
        power_dest_12_ce0,
        power_dest_12_we0,
        power_dest_12_d0,
        power_dest_13_address0,
        power_dest_13_ce0,
        power_dest_13_we0,
        power_dest_13_d0,
        power_dest_14_address0,
        power_dest_14_ce0,
        power_dest_14_we0,
        power_dest_14_d0,
        power_dest_15_address0,
        power_dest_15_ce0,
        power_dest_15_we0,
        power_dest_15_d0,
        power_src
);

parameter    ap_ST_fsm_state1 = 146'd1;
parameter    ap_ST_fsm_state2 = 146'd2;
parameter    ap_ST_fsm_state3 = 146'd4;
parameter    ap_ST_fsm_state4 = 146'd8;
parameter    ap_ST_fsm_state5 = 146'd16;
parameter    ap_ST_fsm_state6 = 146'd32;
parameter    ap_ST_fsm_state7 = 146'd64;
parameter    ap_ST_fsm_state8 = 146'd128;
parameter    ap_ST_fsm_state9 = 146'd256;
parameter    ap_ST_fsm_state10 = 146'd512;
parameter    ap_ST_fsm_state11 = 146'd1024;
parameter    ap_ST_fsm_state12 = 146'd2048;
parameter    ap_ST_fsm_state13 = 146'd4096;
parameter    ap_ST_fsm_state14 = 146'd8192;
parameter    ap_ST_fsm_state15 = 146'd16384;
parameter    ap_ST_fsm_state16 = 146'd32768;
parameter    ap_ST_fsm_state17 = 146'd65536;
parameter    ap_ST_fsm_state18 = 146'd131072;
parameter    ap_ST_fsm_state19 = 146'd262144;
parameter    ap_ST_fsm_state20 = 146'd524288;
parameter    ap_ST_fsm_state21 = 146'd1048576;
parameter    ap_ST_fsm_state22 = 146'd2097152;
parameter    ap_ST_fsm_state23 = 146'd4194304;
parameter    ap_ST_fsm_state24 = 146'd8388608;
parameter    ap_ST_fsm_state25 = 146'd16777216;
parameter    ap_ST_fsm_state26 = 146'd33554432;
parameter    ap_ST_fsm_state27 = 146'd67108864;
parameter    ap_ST_fsm_state28 = 146'd134217728;
parameter    ap_ST_fsm_state29 = 146'd268435456;
parameter    ap_ST_fsm_state30 = 146'd536870912;
parameter    ap_ST_fsm_state31 = 146'd1073741824;
parameter    ap_ST_fsm_state32 = 146'd2147483648;
parameter    ap_ST_fsm_state33 = 146'd4294967296;
parameter    ap_ST_fsm_state34 = 146'd8589934592;
parameter    ap_ST_fsm_state35 = 146'd17179869184;
parameter    ap_ST_fsm_state36 = 146'd34359738368;
parameter    ap_ST_fsm_state37 = 146'd68719476736;
parameter    ap_ST_fsm_state38 = 146'd137438953472;
parameter    ap_ST_fsm_state39 = 146'd274877906944;
parameter    ap_ST_fsm_state40 = 146'd549755813888;
parameter    ap_ST_fsm_state41 = 146'd1099511627776;
parameter    ap_ST_fsm_state42 = 146'd2199023255552;
parameter    ap_ST_fsm_state43 = 146'd4398046511104;
parameter    ap_ST_fsm_state44 = 146'd8796093022208;
parameter    ap_ST_fsm_state45 = 146'd17592186044416;
parameter    ap_ST_fsm_state46 = 146'd35184372088832;
parameter    ap_ST_fsm_state47 = 146'd70368744177664;
parameter    ap_ST_fsm_state48 = 146'd140737488355328;
parameter    ap_ST_fsm_state49 = 146'd281474976710656;
parameter    ap_ST_fsm_state50 = 146'd562949953421312;
parameter    ap_ST_fsm_state51 = 146'd1125899906842624;
parameter    ap_ST_fsm_state52 = 146'd2251799813685248;
parameter    ap_ST_fsm_state53 = 146'd4503599627370496;
parameter    ap_ST_fsm_state54 = 146'd9007199254740992;
parameter    ap_ST_fsm_state55 = 146'd18014398509481984;
parameter    ap_ST_fsm_state56 = 146'd36028797018963968;
parameter    ap_ST_fsm_state57 = 146'd72057594037927936;
parameter    ap_ST_fsm_state58 = 146'd144115188075855872;
parameter    ap_ST_fsm_state59 = 146'd288230376151711744;
parameter    ap_ST_fsm_state60 = 146'd576460752303423488;
parameter    ap_ST_fsm_state61 = 146'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 146'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 146'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 146'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 146'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 146'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 146'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 146'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 146'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 146'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 146'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 146'd2361183241434822606848;
parameter    ap_ST_fsm_pp0_stage0 = 146'd4722366482869645213696;
parameter    ap_ST_fsm_state76 = 146'd9444732965739290427392;
parameter    ap_ST_fsm_state77 = 146'd18889465931478580854784;
parameter    ap_ST_fsm_state78 = 146'd37778931862957161709568;
parameter    ap_ST_fsm_state79 = 146'd75557863725914323419136;
parameter    ap_ST_fsm_state80 = 146'd151115727451828646838272;
parameter    ap_ST_fsm_state81 = 146'd302231454903657293676544;
parameter    ap_ST_fsm_state82 = 146'd604462909807314587353088;
parameter    ap_ST_fsm_state83 = 146'd1208925819614629174706176;
parameter    ap_ST_fsm_state84 = 146'd2417851639229258349412352;
parameter    ap_ST_fsm_state85 = 146'd4835703278458516698824704;
parameter    ap_ST_fsm_state86 = 146'd9671406556917033397649408;
parameter    ap_ST_fsm_state87 = 146'd19342813113834066795298816;
parameter    ap_ST_fsm_state88 = 146'd38685626227668133590597632;
parameter    ap_ST_fsm_state89 = 146'd77371252455336267181195264;
parameter    ap_ST_fsm_state90 = 146'd154742504910672534362390528;
parameter    ap_ST_fsm_state91 = 146'd309485009821345068724781056;
parameter    ap_ST_fsm_state92 = 146'd618970019642690137449562112;
parameter    ap_ST_fsm_state93 = 146'd1237940039285380274899124224;
parameter    ap_ST_fsm_state94 = 146'd2475880078570760549798248448;
parameter    ap_ST_fsm_state95 = 146'd4951760157141521099596496896;
parameter    ap_ST_fsm_state96 = 146'd9903520314283042199192993792;
parameter    ap_ST_fsm_state97 = 146'd19807040628566084398385987584;
parameter    ap_ST_fsm_state98 = 146'd39614081257132168796771975168;
parameter    ap_ST_fsm_state99 = 146'd79228162514264337593543950336;
parameter    ap_ST_fsm_state100 = 146'd158456325028528675187087900672;
parameter    ap_ST_fsm_state101 = 146'd316912650057057350374175801344;
parameter    ap_ST_fsm_state102 = 146'd633825300114114700748351602688;
parameter    ap_ST_fsm_state103 = 146'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state104 = 146'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state105 = 146'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state106 = 146'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state107 = 146'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state108 = 146'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state109 = 146'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state110 = 146'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state111 = 146'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state112 = 146'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state113 = 146'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state114 = 146'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state115 = 146'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state116 = 146'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state117 = 146'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state118 = 146'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state119 = 146'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state120 = 146'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state121 = 146'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state122 = 146'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state123 = 146'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state124 = 146'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state125 = 146'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state126 = 146'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state127 = 146'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state128 = 146'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state129 = 146'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state130 = 146'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state131 = 146'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state132 = 146'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state133 = 146'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state134 = 146'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state135 = 146'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state136 = 146'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state137 = 146'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state138 = 146'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state139 = 146'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state140 = 146'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state141 = 146'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state142 = 146'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state143 = 146'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state144 = 146'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state145 = 146'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state146 = 146'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_pp1_stage0 = 146'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state150 = 146'd44601490397061246283071436545296723011960832;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_temp1_AWVALID;
input   m_axi_temp1_AWREADY;
output  [63:0] m_axi_temp1_AWADDR;
output  [0:0] m_axi_temp1_AWID;
output  [31:0] m_axi_temp1_AWLEN;
output  [2:0] m_axi_temp1_AWSIZE;
output  [1:0] m_axi_temp1_AWBURST;
output  [1:0] m_axi_temp1_AWLOCK;
output  [3:0] m_axi_temp1_AWCACHE;
output  [2:0] m_axi_temp1_AWPROT;
output  [3:0] m_axi_temp1_AWQOS;
output  [3:0] m_axi_temp1_AWREGION;
output  [0:0] m_axi_temp1_AWUSER;
output   m_axi_temp1_WVALID;
input   m_axi_temp1_WREADY;
output  [511:0] m_axi_temp1_WDATA;
output  [63:0] m_axi_temp1_WSTRB;
output   m_axi_temp1_WLAST;
output  [0:0] m_axi_temp1_WID;
output  [0:0] m_axi_temp1_WUSER;
output   m_axi_temp1_ARVALID;
input   m_axi_temp1_ARREADY;
output  [63:0] m_axi_temp1_ARADDR;
output  [0:0] m_axi_temp1_ARID;
output  [31:0] m_axi_temp1_ARLEN;
output  [2:0] m_axi_temp1_ARSIZE;
output  [1:0] m_axi_temp1_ARBURST;
output  [1:0] m_axi_temp1_ARLOCK;
output  [3:0] m_axi_temp1_ARCACHE;
output  [2:0] m_axi_temp1_ARPROT;
output  [3:0] m_axi_temp1_ARQOS;
output  [3:0] m_axi_temp1_ARREGION;
output  [0:0] m_axi_temp1_ARUSER;
input   m_axi_temp1_RVALID;
output   m_axi_temp1_RREADY;
input  [511:0] m_axi_temp1_RDATA;
input   m_axi_temp1_RLAST;
input  [0:0] m_axi_temp1_RID;
input  [0:0] m_axi_temp1_RUSER;
input  [1:0] m_axi_temp1_RRESP;
input   m_axi_temp1_BVALID;
output   m_axi_temp1_BREADY;
input  [1:0] m_axi_temp1_BRESP;
input  [0:0] m_axi_temp1_BID;
input  [0:0] m_axi_temp1_BUSER;
output   m_axi_power1_AWVALID;
input   m_axi_power1_AWREADY;
output  [63:0] m_axi_power1_AWADDR;
output  [0:0] m_axi_power1_AWID;
output  [31:0] m_axi_power1_AWLEN;
output  [2:0] m_axi_power1_AWSIZE;
output  [1:0] m_axi_power1_AWBURST;
output  [1:0] m_axi_power1_AWLOCK;
output  [3:0] m_axi_power1_AWCACHE;
output  [2:0] m_axi_power1_AWPROT;
output  [3:0] m_axi_power1_AWQOS;
output  [3:0] m_axi_power1_AWREGION;
output  [0:0] m_axi_power1_AWUSER;
output   m_axi_power1_WVALID;
input   m_axi_power1_WREADY;
output  [511:0] m_axi_power1_WDATA;
output  [63:0] m_axi_power1_WSTRB;
output   m_axi_power1_WLAST;
output  [0:0] m_axi_power1_WID;
output  [0:0] m_axi_power1_WUSER;
output   m_axi_power1_ARVALID;
input   m_axi_power1_ARREADY;
output  [63:0] m_axi_power1_ARADDR;
output  [0:0] m_axi_power1_ARID;
output  [31:0] m_axi_power1_ARLEN;
output  [2:0] m_axi_power1_ARSIZE;
output  [1:0] m_axi_power1_ARBURST;
output  [1:0] m_axi_power1_ARLOCK;
output  [3:0] m_axi_power1_ARCACHE;
output  [2:0] m_axi_power1_ARPROT;
output  [3:0] m_axi_power1_ARQOS;
output  [3:0] m_axi_power1_ARREGION;
output  [0:0] m_axi_power1_ARUSER;
input   m_axi_power1_RVALID;
output   m_axi_power1_RREADY;
input  [511:0] m_axi_power1_RDATA;
input   m_axi_power1_RLAST;
input  [0:0] m_axi_power1_RID;
input  [0:0] m_axi_power1_RUSER;
input  [1:0] m_axi_power1_RRESP;
input   m_axi_power1_BVALID;
output   m_axi_power1_BREADY;
input  [1:0] m_axi_power1_BRESP;
input  [0:0] m_axi_power1_BID;
input  [0:0] m_axi_power1_BUSER;
input  [0:0] flag;
input  [3:0] k;
output  [11:0] temp_dest_address0;
output   temp_dest_ce0;
output   temp_dest_we0;
output  [31:0] temp_dest_d0;
output  [11:0] temp_dest_1_address0;
output   temp_dest_1_ce0;
output   temp_dest_1_we0;
output  [31:0] temp_dest_1_d0;
output  [11:0] temp_dest_2_address0;
output   temp_dest_2_ce0;
output   temp_dest_2_we0;
output  [31:0] temp_dest_2_d0;
output  [11:0] temp_dest_3_address0;
output   temp_dest_3_ce0;
output   temp_dest_3_we0;
output  [31:0] temp_dest_3_d0;
output  [11:0] temp_dest_4_address0;
output   temp_dest_4_ce0;
output   temp_dest_4_we0;
output  [31:0] temp_dest_4_d0;
output  [11:0] temp_dest_5_address0;
output   temp_dest_5_ce0;
output   temp_dest_5_we0;
output  [31:0] temp_dest_5_d0;
output  [11:0] temp_dest_6_address0;
output   temp_dest_6_ce0;
output   temp_dest_6_we0;
output  [31:0] temp_dest_6_d0;
output  [11:0] temp_dest_7_address0;
output   temp_dest_7_ce0;
output   temp_dest_7_we0;
output  [31:0] temp_dest_7_d0;
output  [11:0] temp_dest_8_address0;
output   temp_dest_8_ce0;
output   temp_dest_8_we0;
output  [31:0] temp_dest_8_d0;
output  [11:0] temp_dest_9_address0;
output   temp_dest_9_ce0;
output   temp_dest_9_we0;
output  [31:0] temp_dest_9_d0;
output  [11:0] temp_dest_10_address0;
output   temp_dest_10_ce0;
output   temp_dest_10_we0;
output  [31:0] temp_dest_10_d0;
output  [11:0] temp_dest_11_address0;
output   temp_dest_11_ce0;
output   temp_dest_11_we0;
output  [31:0] temp_dest_11_d0;
output  [11:0] temp_dest_12_address0;
output   temp_dest_12_ce0;
output   temp_dest_12_we0;
output  [31:0] temp_dest_12_d0;
output  [11:0] temp_dest_13_address0;
output   temp_dest_13_ce0;
output   temp_dest_13_we0;
output  [31:0] temp_dest_13_d0;
output  [11:0] temp_dest_14_address0;
output   temp_dest_14_ce0;
output   temp_dest_14_we0;
output  [31:0] temp_dest_14_d0;
output  [11:0] temp_dest_15_address0;
output   temp_dest_15_ce0;
output   temp_dest_15_we0;
output  [31:0] temp_dest_15_d0;
input  [63:0] temp_src;
output  [10:0] power_dest_address0;
output   power_dest_ce0;
output   power_dest_we0;
output  [31:0] power_dest_d0;
output  [10:0] power_dest_1_address0;
output   power_dest_1_ce0;
output   power_dest_1_we0;
output  [31:0] power_dest_1_d0;
output  [10:0] power_dest_2_address0;
output   power_dest_2_ce0;
output   power_dest_2_we0;
output  [31:0] power_dest_2_d0;
output  [10:0] power_dest_3_address0;
output   power_dest_3_ce0;
output   power_dest_3_we0;
output  [31:0] power_dest_3_d0;
output  [10:0] power_dest_4_address0;
output   power_dest_4_ce0;
output   power_dest_4_we0;
output  [31:0] power_dest_4_d0;
output  [10:0] power_dest_5_address0;
output   power_dest_5_ce0;
output   power_dest_5_we0;
output  [31:0] power_dest_5_d0;
output  [10:0] power_dest_6_address0;
output   power_dest_6_ce0;
output   power_dest_6_we0;
output  [31:0] power_dest_6_d0;
output  [10:0] power_dest_7_address0;
output   power_dest_7_ce0;
output   power_dest_7_we0;
output  [31:0] power_dest_7_d0;
output  [10:0] power_dest_8_address0;
output   power_dest_8_ce0;
output   power_dest_8_we0;
output  [31:0] power_dest_8_d0;
output  [10:0] power_dest_9_address0;
output   power_dest_9_ce0;
output   power_dest_9_we0;
output  [31:0] power_dest_9_d0;
output  [10:0] power_dest_10_address0;
output   power_dest_10_ce0;
output   power_dest_10_we0;
output  [31:0] power_dest_10_d0;
output  [10:0] power_dest_11_address0;
output   power_dest_11_ce0;
output   power_dest_11_we0;
output  [31:0] power_dest_11_d0;
output  [10:0] power_dest_12_address0;
output   power_dest_12_ce0;
output   power_dest_12_we0;
output  [31:0] power_dest_12_d0;
output  [10:0] power_dest_13_address0;
output   power_dest_13_ce0;
output   power_dest_13_we0;
output  [31:0] power_dest_13_d0;
output  [10:0] power_dest_14_address0;
output   power_dest_14_ce0;
output   power_dest_14_we0;
output  [31:0] power_dest_14_d0;
output  [10:0] power_dest_15_address0;
output   power_dest_15_ce0;
output   power_dest_15_we0;
output  [31:0] power_dest_15_d0;
input  [63:0] power_src;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_temp1_ARVALID;
reg m_axi_temp1_RREADY;
reg m_axi_power1_ARVALID;
reg m_axi_power1_RREADY;
reg temp_dest_ce0;
reg temp_dest_we0;
reg temp_dest_1_ce0;
reg temp_dest_1_we0;
reg temp_dest_2_ce0;
reg temp_dest_2_we0;
reg temp_dest_3_ce0;
reg temp_dest_3_we0;
reg temp_dest_4_ce0;
reg temp_dest_4_we0;
reg temp_dest_5_ce0;
reg temp_dest_5_we0;
reg temp_dest_6_ce0;
reg temp_dest_6_we0;
reg temp_dest_7_ce0;
reg temp_dest_7_we0;
reg temp_dest_8_ce0;
reg temp_dest_8_we0;
reg temp_dest_9_ce0;
reg temp_dest_9_we0;
reg temp_dest_10_ce0;
reg temp_dest_10_we0;
reg temp_dest_11_ce0;
reg temp_dest_11_we0;
reg temp_dest_12_ce0;
reg temp_dest_12_we0;
reg temp_dest_13_ce0;
reg temp_dest_13_we0;
reg temp_dest_14_ce0;
reg temp_dest_14_we0;
reg temp_dest_15_ce0;
reg temp_dest_15_we0;
reg power_dest_ce0;
reg power_dest_we0;
reg power_dest_1_ce0;
reg power_dest_1_we0;
reg power_dest_2_ce0;
reg power_dest_2_we0;
reg power_dest_3_ce0;
reg power_dest_3_we0;
reg power_dest_4_ce0;
reg power_dest_4_we0;
reg power_dest_5_ce0;
reg power_dest_5_we0;
reg power_dest_6_ce0;
reg power_dest_6_we0;
reg power_dest_7_ce0;
reg power_dest_7_we0;
reg power_dest_8_ce0;
reg power_dest_8_we0;
reg power_dest_9_ce0;
reg power_dest_9_we0;
reg power_dest_10_ce0;
reg power_dest_10_we0;
reg power_dest_11_ce0;
reg power_dest_11_we0;
reg power_dest_12_ce0;
reg power_dest_12_we0;
reg power_dest_13_ce0;
reg power_dest_13_we0;
reg power_dest_14_ce0;
reg power_dest_14_we0;
reg power_dest_15_ce0;
reg power_dest_15_we0;

(* fsm_encoding = "none" *) reg   [145:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    temp1_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    temp1_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln1842_reg_1399;
reg    power1_blk_n_AR;
wire    ap_CS_fsm_state77;
reg    power1_blk_n_R;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln1842_1_reg_1499;
reg   [11:0] i_reg_682;
reg   [11:0] i_reg_682_pp0_iter1_reg;
wire    ap_block_state73_pp0_stage0_iter0;
reg    ap_block_state74_pp0_stage0_iter1;
wire    ap_block_state75_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [11:0] i_4_reg_694;
reg   [11:0] i_4_reg_694_pp1_iter1_reg;
wire    ap_block_state147_pp1_stage0_iter0;
reg    ap_block_state148_pp1_stage0_iter1;
wire    ap_block_state149_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] flag_read_read_fu_236_p2;
wire   [19:0] zext_ln64_fu_714_p1;
reg   [19:0] zext_ln64_reg_1378;
reg   [15:0] trunc_ln64_1_reg_1383;
reg   [57:0] trunc_ln4_reg_1388;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln1842_fu_823_p2;
reg   [0:0] icmp_ln1842_reg_1399_pp0_iter1_reg;
wire   [11:0] i_5_fu_829_p2;
reg   [11:0] i_5_reg_1403;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] trunc_ln708_fu_835_p1;
reg   [31:0] trunc_ln708_reg_1408;
reg   [31:0] p_Result_s_reg_1413;
reg   [31:0] p_Result_2_reg_1418;
reg   [31:0] p_Result_3_reg_1423;
reg   [31:0] p_Result_4_reg_1428;
reg   [31:0] p_Result_5_reg_1433;
reg   [31:0] p_Result_6_reg_1438;
reg   [31:0] p_Result_7_reg_1443;
reg   [31:0] p_Result_8_reg_1448;
reg   [31:0] p_Result_9_reg_1453;
reg   [31:0] p_Result_1_reg_1458;
reg   [31:0] p_Result_10_reg_1463;
reg   [31:0] p_Result_11_reg_1468;
reg   [31:0] p_Result_12_reg_1473;
reg   [31:0] p_Result_13_reg_1478;
reg   [31:0] p_Result_14_reg_1483;
reg   [57:0] trunc_ln1842_1_reg_1488;
wire    ap_CS_fsm_state76;
wire   [0:0] icmp_ln1842_1_fu_1109_p2;
reg   [0:0] icmp_ln1842_1_reg_1499_pp1_iter1_reg;
wire   [11:0] i_6_fu_1115_p2;
reg   [11:0] i_6_reg_1503;
reg    ap_enable_reg_pp1_iter0;
wire   [31:0] trunc_ln708_1_fu_1121_p1;
reg   [31:0] trunc_ln708_1_reg_1508;
reg   [31:0] p_Result_1_1_reg_1513;
reg   [31:0] p_Result_1_2_reg_1518;
reg   [31:0] p_Result_1_3_reg_1523;
reg   [31:0] p_Result_1_4_reg_1528;
reg   [31:0] p_Result_1_5_reg_1533;
reg   [31:0] p_Result_1_6_reg_1538;
reg   [31:0] p_Result_1_7_reg_1543;
reg   [31:0] p_Result_1_8_reg_1548;
reg   [31:0] p_Result_1_9_reg_1553;
reg   [31:0] p_Result_1_s_reg_1558;
reg   [31:0] p_Result_1_10_reg_1563;
reg   [31:0] p_Result_1_11_reg_1568;
reg   [31:0] p_Result_1_12_reg_1573;
reg   [31:0] p_Result_1_13_reg_1578;
reg   [31:0] p_Result_1_14_reg_1583;
wire    ap_CS_fsm_state72;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state73;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state146;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state147;
reg    ap_enable_reg_pp1_iter2;
reg   [11:0] ap_phi_mux_i_phi_fu_686_p4;
reg   [11:0] ap_phi_mux_i_4_phi_fu_698_p4;
wire   [63:0] zext_ln1842_1_fu_989_p1;
wire   [63:0] zext_ln1842_2_fu_1275_p1;
wire  signed [63:0] sext_ln1842_fu_813_p1;
wire  signed [63:0] sext_ln1842_1_fu_1099_p1;
wire   [18:0] shl_ln_fu_706_p3;
wire   [19:0] sub_ln64_fu_718_p2;
wire   [19:0] add_ln64_fu_734_p2;
wire  signed [27:0] sext_ln64_fu_747_p1;
wire   [28:0] zext_ln64_1_fu_750_p1;
wire   [15:0] trunc_ln64_2_fu_760_p4;
wire  signed [27:0] sext_ln64_1_fu_770_p1;
wire   [0:0] tmp_fu_739_p3;
wire   [28:0] sub_ln64_1_fu_754_p2;
wire   [28:0] zext_ln64_2_fu_774_p1;
wire   [28:0] select_ln64_fu_778_p3;
wire   [34:0] shl_ln1_fu_786_p3;
wire  signed [63:0] sext_ln1842_2_fu_794_p1;
wire   [63:0] add_ln1842_fu_798_p2;
wire   [20:0] shl_ln1842_1_fu_1073_p3;
wire   [63:0] zext_ln1842_fu_1080_p1;
wire   [63:0] add_ln1842_1_fu_1084_p2;
wire    ap_CS_fsm_state150;
reg   [145:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 146'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state73) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state72)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state73)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state73);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state72)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state147) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state146)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state147)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state147);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state146)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1842_1_reg_1499 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_4_reg_694 <= i_6_reg_1503;
    end else if ((1'b1 == ap_CS_fsm_state146)) begin
        i_4_reg_694 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1842_reg_1399 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_682 <= i_5_reg_1403;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        i_reg_682 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_4_reg_694_pp1_iter1_reg <= i_4_reg_694;
        icmp_ln1842_1_reg_1499 <= icmp_ln1842_1_fu_1109_p2;
        icmp_ln1842_1_reg_1499_pp1_iter1_reg <= icmp_ln1842_1_reg_1499;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_5_reg_1403 <= i_5_fu_829_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_6_reg_1503 <= i_6_fu_1115_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_682_pp0_iter1_reg <= i_reg_682;
        icmp_ln1842_reg_1399 <= icmp_ln1842_fu_823_p2;
        icmp_ln1842_reg_1399_pp0_iter1_reg <= icmp_ln1842_reg_1399;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1842_reg_1399 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_Result_10_reg_1463 <= {{m_axi_temp1_RDATA[383:352]}};
        p_Result_11_reg_1468 <= {{m_axi_temp1_RDATA[415:384]}};
        p_Result_12_reg_1473 <= {{m_axi_temp1_RDATA[447:416]}};
        p_Result_13_reg_1478 <= {{m_axi_temp1_RDATA[479:448]}};
        p_Result_14_reg_1483 <= {{m_axi_temp1_RDATA[511:480]}};
        p_Result_1_reg_1458 <= {{m_axi_temp1_RDATA[351:320]}};
        p_Result_2_reg_1418 <= {{m_axi_temp1_RDATA[95:64]}};
        p_Result_3_reg_1423 <= {{m_axi_temp1_RDATA[127:96]}};
        p_Result_4_reg_1428 <= {{m_axi_temp1_RDATA[159:128]}};
        p_Result_5_reg_1433 <= {{m_axi_temp1_RDATA[191:160]}};
        p_Result_6_reg_1438 <= {{m_axi_temp1_RDATA[223:192]}};
        p_Result_7_reg_1443 <= {{m_axi_temp1_RDATA[255:224]}};
        p_Result_8_reg_1448 <= {{m_axi_temp1_RDATA[287:256]}};
        p_Result_9_reg_1453 <= {{m_axi_temp1_RDATA[319:288]}};
        p_Result_s_reg_1413 <= {{m_axi_temp1_RDATA[63:32]}};
        trunc_ln708_reg_1408 <= trunc_ln708_fu_835_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1842_1_reg_1499 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        p_Result_1_10_reg_1563 <= {{m_axi_power1_RDATA[383:352]}};
        p_Result_1_11_reg_1568 <= {{m_axi_power1_RDATA[415:384]}};
        p_Result_1_12_reg_1573 <= {{m_axi_power1_RDATA[447:416]}};
        p_Result_1_13_reg_1578 <= {{m_axi_power1_RDATA[479:448]}};
        p_Result_1_14_reg_1583 <= {{m_axi_power1_RDATA[511:480]}};
        p_Result_1_1_reg_1513 <= {{m_axi_power1_RDATA[63:32]}};
        p_Result_1_2_reg_1518 <= {{m_axi_power1_RDATA[95:64]}};
        p_Result_1_3_reg_1523 <= {{m_axi_power1_RDATA[127:96]}};
        p_Result_1_4_reg_1528 <= {{m_axi_power1_RDATA[159:128]}};
        p_Result_1_5_reg_1533 <= {{m_axi_power1_RDATA[191:160]}};
        p_Result_1_6_reg_1538 <= {{m_axi_power1_RDATA[223:192]}};
        p_Result_1_7_reg_1543 <= {{m_axi_power1_RDATA[255:224]}};
        p_Result_1_8_reg_1548 <= {{m_axi_power1_RDATA[287:256]}};
        p_Result_1_9_reg_1553 <= {{m_axi_power1_RDATA[319:288]}};
        p_Result_1_s_reg_1558 <= {{m_axi_power1_RDATA[351:320]}};
        trunc_ln708_1_reg_1508 <= trunc_ln708_1_fu_1121_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        trunc_ln1842_1_reg_1488 <= {{add_ln1842_1_fu_1084_p2[63:6]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        trunc_ln4_reg_1388 <= {{add_ln1842_fu_798_p2[63:6]}};
    end
end

always @ (posedge ap_clk) begin
    if (((flag_read_read_fu_236_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        trunc_ln64_1_reg_1383 <= {{sub_ln64_fu_718_p2[19:4]}};
        zext_ln64_reg_1378[18 : 15] <= zext_ln64_fu_714_p1[18 : 15];
    end
end

always @ (*) begin
    if ((icmp_ln1842_fu_823_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state73 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state73 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln1842_1_fu_1109_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state147 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state147 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state150) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1842_1_reg_1499 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_i_4_phi_fu_698_p4 = i_6_reg_1503;
    end else begin
        ap_phi_mux_i_4_phi_fu_698_p4 = i_4_reg_694;
    end
end

always @ (*) begin
    if (((icmp_ln1842_reg_1399 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_686_p4 = i_5_reg_1403;
    end else begin
        ap_phi_mux_i_phi_fu_686_p4 = i_reg_682;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state150)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_power1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state77))) begin
        m_axi_power1_ARVALID = 1'b1;
    end else begin
        m_axi_power1_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1842_1_reg_1499 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        m_axi_power1_RREADY = 1'b1;
    end else begin
        m_axi_power1_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (m_axi_temp1_ARREADY == 1'b1))) begin
        m_axi_temp1_ARVALID = 1'b1;
    end else begin
        m_axi_temp1_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1842_reg_1399 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_temp1_RREADY = 1'b1;
    end else begin
        m_axi_temp1_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        power1_blk_n_AR = m_axi_power1_ARREADY;
    end else begin
        power1_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1842_1_reg_1499 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        power1_blk_n_R = m_axi_power1_RVALID;
    end else begin
        power1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        power_dest_10_ce0 = 1'b1;
    end else begin
        power_dest_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln1842_1_reg_1499_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        power_dest_10_we0 = 1'b1;
    end else begin
        power_dest_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        power_dest_11_ce0 = 1'b1;
    end else begin
        power_dest_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln1842_1_reg_1499_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        power_dest_11_we0 = 1'b1;
    end else begin
        power_dest_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        power_dest_12_ce0 = 1'b1;
    end else begin
        power_dest_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln1842_1_reg_1499_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        power_dest_12_we0 = 1'b1;
    end else begin
        power_dest_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        power_dest_13_ce0 = 1'b1;
    end else begin
        power_dest_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln1842_1_reg_1499_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        power_dest_13_we0 = 1'b1;
    end else begin
        power_dest_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        power_dest_14_ce0 = 1'b1;
    end else begin
        power_dest_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln1842_1_reg_1499_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        power_dest_14_we0 = 1'b1;
    end else begin
        power_dest_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        power_dest_15_ce0 = 1'b1;
    end else begin
        power_dest_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln1842_1_reg_1499_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        power_dest_15_we0 = 1'b1;
    end else begin
        power_dest_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        power_dest_1_ce0 = 1'b1;
    end else begin
        power_dest_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln1842_1_reg_1499_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        power_dest_1_we0 = 1'b1;
    end else begin
        power_dest_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        power_dest_2_ce0 = 1'b1;
    end else begin
        power_dest_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln1842_1_reg_1499_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        power_dest_2_we0 = 1'b1;
    end else begin
        power_dest_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        power_dest_3_ce0 = 1'b1;
    end else begin
        power_dest_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln1842_1_reg_1499_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        power_dest_3_we0 = 1'b1;
    end else begin
        power_dest_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        power_dest_4_ce0 = 1'b1;
    end else begin
        power_dest_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln1842_1_reg_1499_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        power_dest_4_we0 = 1'b1;
    end else begin
        power_dest_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        power_dest_5_ce0 = 1'b1;
    end else begin
        power_dest_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln1842_1_reg_1499_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        power_dest_5_we0 = 1'b1;
    end else begin
        power_dest_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        power_dest_6_ce0 = 1'b1;
    end else begin
        power_dest_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln1842_1_reg_1499_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        power_dest_6_we0 = 1'b1;
    end else begin
        power_dest_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        power_dest_7_ce0 = 1'b1;
    end else begin
        power_dest_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln1842_1_reg_1499_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        power_dest_7_we0 = 1'b1;
    end else begin
        power_dest_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        power_dest_8_ce0 = 1'b1;
    end else begin
        power_dest_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln1842_1_reg_1499_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        power_dest_8_we0 = 1'b1;
    end else begin
        power_dest_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        power_dest_9_ce0 = 1'b1;
    end else begin
        power_dest_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln1842_1_reg_1499_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        power_dest_9_we0 = 1'b1;
    end else begin
        power_dest_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        power_dest_ce0 = 1'b1;
    end else begin
        power_dest_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln1842_1_reg_1499_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        power_dest_we0 = 1'b1;
    end else begin
        power_dest_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        temp1_blk_n_AR = m_axi_temp1_ARREADY;
    end else begin
        temp1_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1842_reg_1399 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp1_blk_n_R = m_axi_temp1_RVALID;
    end else begin
        temp1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_dest_10_ce0 = 1'b1;
    end else begin
        temp_dest_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1842_reg_1399_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_dest_10_we0 = 1'b1;
    end else begin
        temp_dest_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_dest_11_ce0 = 1'b1;
    end else begin
        temp_dest_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1842_reg_1399_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_dest_11_we0 = 1'b1;
    end else begin
        temp_dest_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_dest_12_ce0 = 1'b1;
    end else begin
        temp_dest_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1842_reg_1399_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_dest_12_we0 = 1'b1;
    end else begin
        temp_dest_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_dest_13_ce0 = 1'b1;
    end else begin
        temp_dest_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1842_reg_1399_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_dest_13_we0 = 1'b1;
    end else begin
        temp_dest_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_dest_14_ce0 = 1'b1;
    end else begin
        temp_dest_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1842_reg_1399_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_dest_14_we0 = 1'b1;
    end else begin
        temp_dest_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_dest_15_ce0 = 1'b1;
    end else begin
        temp_dest_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1842_reg_1399_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_dest_15_we0 = 1'b1;
    end else begin
        temp_dest_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_dest_1_ce0 = 1'b1;
    end else begin
        temp_dest_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1842_reg_1399_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_dest_1_we0 = 1'b1;
    end else begin
        temp_dest_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_dest_2_ce0 = 1'b1;
    end else begin
        temp_dest_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1842_reg_1399_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_dest_2_we0 = 1'b1;
    end else begin
        temp_dest_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_dest_3_ce0 = 1'b1;
    end else begin
        temp_dest_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1842_reg_1399_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_dest_3_we0 = 1'b1;
    end else begin
        temp_dest_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_dest_4_ce0 = 1'b1;
    end else begin
        temp_dest_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1842_reg_1399_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_dest_4_we0 = 1'b1;
    end else begin
        temp_dest_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_dest_5_ce0 = 1'b1;
    end else begin
        temp_dest_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1842_reg_1399_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_dest_5_we0 = 1'b1;
    end else begin
        temp_dest_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_dest_6_ce0 = 1'b1;
    end else begin
        temp_dest_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1842_reg_1399_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_dest_6_we0 = 1'b1;
    end else begin
        temp_dest_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_dest_7_ce0 = 1'b1;
    end else begin
        temp_dest_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1842_reg_1399_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_dest_7_we0 = 1'b1;
    end else begin
        temp_dest_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_dest_8_ce0 = 1'b1;
    end else begin
        temp_dest_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1842_reg_1399_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_dest_8_we0 = 1'b1;
    end else begin
        temp_dest_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_dest_9_ce0 = 1'b1;
    end else begin
        temp_dest_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1842_reg_1399_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_dest_9_we0 = 1'b1;
    end else begin
        temp_dest_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_dest_ce0 = 1'b1;
    end else begin
        temp_dest_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1842_reg_1399_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_dest_we0 = 1'b1;
    end else begin
        temp_dest_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((flag_read_read_fu_236_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state150;
            end else if (((flag_read_read_fu_236_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (m_axi_temp1_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1842_fu_823_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1842_fu_823_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            if (((m_axi_power1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state77))) begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln1842_1_fu_1109_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln1842_1_fu_1109_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state150;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state150 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1842_1_fu_1084_p2 = (zext_ln1842_fu_1080_p1 + power_src);

assign add_ln1842_fu_798_p2 = ($signed(sext_ln1842_2_fu_794_p1) + $signed(temp_src));

assign add_ln64_fu_734_p2 = ($signed(zext_ln64_reg_1378) + $signed(20'd1048064));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd144];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state146 = ap_CS_fsm[32'd143];

assign ap_CS_fsm_state150 = ap_CS_fsm[32'd145];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd74];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln1842_reg_1399 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (m_axi_temp1_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln1842_reg_1399 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (m_axi_temp1_RVALID == 1'b0));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((icmp_ln1842_1_reg_1499 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (m_axi_power1_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((icmp_ln1842_1_reg_1499 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (m_axi_power1_RVALID == 1'b0));
end

assign ap_block_state147_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state148_pp1_stage0_iter1 = ((icmp_ln1842_1_reg_1499 == 1'd0) & (m_axi_power1_RVALID == 1'b0));
end

assign ap_block_state149_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state74_pp0_stage0_iter1 = ((icmp_ln1842_reg_1399 == 1'd0) & (m_axi_temp1_RVALID == 1'b0));
end

assign ap_block_state75_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign flag_read_read_fu_236_p2 = flag;

assign i_5_fu_829_p2 = (ap_phi_mux_i_phi_fu_686_p4 + 12'd1);

assign i_6_fu_1115_p2 = (ap_phi_mux_i_4_phi_fu_698_p4 + 12'd1);

assign icmp_ln1842_1_fu_1109_p2 = ((ap_phi_mux_i_4_phi_fu_698_p4 == 12'd2048) ? 1'b1 : 1'b0);

assign icmp_ln1842_fu_823_p2 = ((ap_phi_mux_i_phi_fu_686_p4 == 12'd2112) ? 1'b1 : 1'b0);

assign m_axi_power1_ARADDR = sext_ln1842_1_fu_1099_p1;

assign m_axi_power1_ARBURST = 2'd0;

assign m_axi_power1_ARCACHE = 4'd0;

assign m_axi_power1_ARID = 1'd0;

assign m_axi_power1_ARLEN = 32'd2048;

assign m_axi_power1_ARLOCK = 2'd0;

assign m_axi_power1_ARPROT = 3'd0;

assign m_axi_power1_ARQOS = 4'd0;

assign m_axi_power1_ARREGION = 4'd0;

assign m_axi_power1_ARSIZE = 3'd0;

assign m_axi_power1_ARUSER = 1'd0;

assign m_axi_power1_AWADDR = 64'd0;

assign m_axi_power1_AWBURST = 2'd0;

assign m_axi_power1_AWCACHE = 4'd0;

assign m_axi_power1_AWID = 1'd0;

assign m_axi_power1_AWLEN = 32'd0;

assign m_axi_power1_AWLOCK = 2'd0;

assign m_axi_power1_AWPROT = 3'd0;

assign m_axi_power1_AWQOS = 4'd0;

assign m_axi_power1_AWREGION = 4'd0;

assign m_axi_power1_AWSIZE = 3'd0;

assign m_axi_power1_AWUSER = 1'd0;

assign m_axi_power1_AWVALID = 1'b0;

assign m_axi_power1_BREADY = 1'b0;

assign m_axi_power1_WDATA = 512'd0;

assign m_axi_power1_WID = 1'd0;

assign m_axi_power1_WLAST = 1'b0;

assign m_axi_power1_WSTRB = 64'd0;

assign m_axi_power1_WUSER = 1'd0;

assign m_axi_power1_WVALID = 1'b0;

assign m_axi_temp1_ARADDR = sext_ln1842_fu_813_p1;

assign m_axi_temp1_ARBURST = 2'd0;

assign m_axi_temp1_ARCACHE = 4'd0;

assign m_axi_temp1_ARID = 1'd0;

assign m_axi_temp1_ARLEN = 32'd2112;

assign m_axi_temp1_ARLOCK = 2'd0;

assign m_axi_temp1_ARPROT = 3'd0;

assign m_axi_temp1_ARQOS = 4'd0;

assign m_axi_temp1_ARREGION = 4'd0;

assign m_axi_temp1_ARSIZE = 3'd0;

assign m_axi_temp1_ARUSER = 1'd0;

assign m_axi_temp1_AWADDR = 64'd0;

assign m_axi_temp1_AWBURST = 2'd0;

assign m_axi_temp1_AWCACHE = 4'd0;

assign m_axi_temp1_AWID = 1'd0;

assign m_axi_temp1_AWLEN = 32'd0;

assign m_axi_temp1_AWLOCK = 2'd0;

assign m_axi_temp1_AWPROT = 3'd0;

assign m_axi_temp1_AWQOS = 4'd0;

assign m_axi_temp1_AWREGION = 4'd0;

assign m_axi_temp1_AWSIZE = 3'd0;

assign m_axi_temp1_AWUSER = 1'd0;

assign m_axi_temp1_AWVALID = 1'b0;

assign m_axi_temp1_BREADY = 1'b0;

assign m_axi_temp1_WDATA = 512'd0;

assign m_axi_temp1_WID = 1'd0;

assign m_axi_temp1_WLAST = 1'b0;

assign m_axi_temp1_WSTRB = 64'd0;

assign m_axi_temp1_WUSER = 1'd0;

assign m_axi_temp1_WVALID = 1'b0;

assign power_dest_10_address0 = zext_ln1842_2_fu_1275_p1;

assign power_dest_10_d0 = p_Result_1_s_reg_1558;

assign power_dest_11_address0 = zext_ln1842_2_fu_1275_p1;

assign power_dest_11_d0 = p_Result_1_10_reg_1563;

assign power_dest_12_address0 = zext_ln1842_2_fu_1275_p1;

assign power_dest_12_d0 = p_Result_1_11_reg_1568;

assign power_dest_13_address0 = zext_ln1842_2_fu_1275_p1;

assign power_dest_13_d0 = p_Result_1_12_reg_1573;

assign power_dest_14_address0 = zext_ln1842_2_fu_1275_p1;

assign power_dest_14_d0 = p_Result_1_13_reg_1578;

assign power_dest_15_address0 = zext_ln1842_2_fu_1275_p1;

assign power_dest_15_d0 = p_Result_1_14_reg_1583;

assign power_dest_1_address0 = zext_ln1842_2_fu_1275_p1;

assign power_dest_1_d0 = p_Result_1_1_reg_1513;

assign power_dest_2_address0 = zext_ln1842_2_fu_1275_p1;

assign power_dest_2_d0 = p_Result_1_2_reg_1518;

assign power_dest_3_address0 = zext_ln1842_2_fu_1275_p1;

assign power_dest_3_d0 = p_Result_1_3_reg_1523;

assign power_dest_4_address0 = zext_ln1842_2_fu_1275_p1;

assign power_dest_4_d0 = p_Result_1_4_reg_1528;

assign power_dest_5_address0 = zext_ln1842_2_fu_1275_p1;

assign power_dest_5_d0 = p_Result_1_5_reg_1533;

assign power_dest_6_address0 = zext_ln1842_2_fu_1275_p1;

assign power_dest_6_d0 = p_Result_1_6_reg_1538;

assign power_dest_7_address0 = zext_ln1842_2_fu_1275_p1;

assign power_dest_7_d0 = p_Result_1_7_reg_1543;

assign power_dest_8_address0 = zext_ln1842_2_fu_1275_p1;

assign power_dest_8_d0 = p_Result_1_8_reg_1548;

assign power_dest_9_address0 = zext_ln1842_2_fu_1275_p1;

assign power_dest_9_d0 = p_Result_1_9_reg_1553;

assign power_dest_address0 = zext_ln1842_2_fu_1275_p1;

assign power_dest_d0 = trunc_ln708_1_reg_1508;

assign select_ln64_fu_778_p3 = ((tmp_fu_739_p3[0:0] === 1'b1) ? sub_ln64_1_fu_754_p2 : zext_ln64_2_fu_774_p1);

assign sext_ln1842_1_fu_1099_p1 = $signed(trunc_ln1842_1_reg_1488);

assign sext_ln1842_2_fu_794_p1 = $signed(shl_ln1_fu_786_p3);

assign sext_ln1842_fu_813_p1 = $signed(trunc_ln4_reg_1388);

assign sext_ln64_1_fu_770_p1 = $signed(trunc_ln64_2_fu_760_p4);

assign sext_ln64_fu_747_p1 = $signed(trunc_ln64_1_reg_1383);

assign shl_ln1842_1_fu_1073_p3 = {{k}, {17'd0}};

assign shl_ln1_fu_786_p3 = {{select_ln64_fu_778_p3}, {6'd0}};

assign shl_ln_fu_706_p3 = {{k}, {15'd0}};

assign sub_ln64_1_fu_754_p2 = (29'd0 - zext_ln64_1_fu_750_p1);

assign sub_ln64_fu_718_p2 = (20'd512 - zext_ln64_fu_714_p1);

assign temp_dest_10_address0 = zext_ln1842_1_fu_989_p1;

assign temp_dest_10_d0 = p_Result_1_reg_1458;

assign temp_dest_11_address0 = zext_ln1842_1_fu_989_p1;

assign temp_dest_11_d0 = p_Result_10_reg_1463;

assign temp_dest_12_address0 = zext_ln1842_1_fu_989_p1;

assign temp_dest_12_d0 = p_Result_11_reg_1468;

assign temp_dest_13_address0 = zext_ln1842_1_fu_989_p1;

assign temp_dest_13_d0 = p_Result_12_reg_1473;

assign temp_dest_14_address0 = zext_ln1842_1_fu_989_p1;

assign temp_dest_14_d0 = p_Result_13_reg_1478;

assign temp_dest_15_address0 = zext_ln1842_1_fu_989_p1;

assign temp_dest_15_d0 = p_Result_14_reg_1483;

assign temp_dest_1_address0 = zext_ln1842_1_fu_989_p1;

assign temp_dest_1_d0 = p_Result_s_reg_1413;

assign temp_dest_2_address0 = zext_ln1842_1_fu_989_p1;

assign temp_dest_2_d0 = p_Result_2_reg_1418;

assign temp_dest_3_address0 = zext_ln1842_1_fu_989_p1;

assign temp_dest_3_d0 = p_Result_3_reg_1423;

assign temp_dest_4_address0 = zext_ln1842_1_fu_989_p1;

assign temp_dest_4_d0 = p_Result_4_reg_1428;

assign temp_dest_5_address0 = zext_ln1842_1_fu_989_p1;

assign temp_dest_5_d0 = p_Result_5_reg_1433;

assign temp_dest_6_address0 = zext_ln1842_1_fu_989_p1;

assign temp_dest_6_d0 = p_Result_6_reg_1438;

assign temp_dest_7_address0 = zext_ln1842_1_fu_989_p1;

assign temp_dest_7_d0 = p_Result_7_reg_1443;

assign temp_dest_8_address0 = zext_ln1842_1_fu_989_p1;

assign temp_dest_8_d0 = p_Result_8_reg_1448;

assign temp_dest_9_address0 = zext_ln1842_1_fu_989_p1;

assign temp_dest_9_d0 = p_Result_9_reg_1453;

assign temp_dest_address0 = zext_ln1842_1_fu_989_p1;

assign temp_dest_d0 = trunc_ln708_reg_1408;

assign tmp_fu_739_p3 = add_ln64_fu_734_p2[32'd19];

assign trunc_ln64_2_fu_760_p4 = {{add_ln64_fu_734_p2[19:4]}};

assign trunc_ln708_1_fu_1121_p1 = m_axi_power1_RDATA[31:0];

assign trunc_ln708_fu_835_p1 = m_axi_temp1_RDATA[31:0];

assign zext_ln1842_1_fu_989_p1 = i_reg_682_pp0_iter1_reg;

assign zext_ln1842_2_fu_1275_p1 = i_4_reg_694_pp1_iter1_reg;

assign zext_ln1842_fu_1080_p1 = shl_ln1842_1_fu_1073_p3;

assign zext_ln64_1_fu_750_p1 = $unsigned(sext_ln64_fu_747_p1);

assign zext_ln64_2_fu_774_p1 = $unsigned(sext_ln64_1_fu_770_p1);

assign zext_ln64_fu_714_p1 = shl_ln_fu_706_p3;

always @ (posedge ap_clk) begin
    zext_ln64_reg_1378[14:0] <= 15'b000000000000000;
    zext_ln64_reg_1378[19] <= 1'b0;
end

endmodule //workload_buffer_load_1
